syntax = "proto3";

import "google/protobuf/empty.proto";
import "google/protobuf/wrappers.proto";
import "google/protobuf/timestamp.proto";

package cake;
option go_package = "2025_CakeLand_API/internal/pkg/cake/delivery/grpc/generated";

/* ############### Cake ############### */
message CakeRequest {
  string cake_id = 1;
}

message CakeResponse {
  Cake cake = 1; // Информация о торте
}

/* ############### CreateCake ############### */
message CreateCakeRequest {
  string name = 1;                                                // Название торта
  bytes preview_image_data = 2;                                   // Данные preview изображения торта
  double kg_price = 3;                                            // Цена за кг
  string description = 4;                                         // Описание торта
  double mass = 5;                                                // Масса торта
  bool is_open_for_sale = 6;                                      // Доступен ли для продажи
  repeated string filling_ids = 7;                                // Список ID начинок
  repeated string category_ids = 8;                               // Список ID категорий
  repeated bytes images = 9;                                      // Все фотографии торта
  optional google.protobuf.DoubleValue discount_kg_price = 10;    // Скидочная цена за кг (nullable)
  optional google.protobuf.Timestamp discount_end_time = 11;      // Время окончания скидки (nullable)
}

message CreateCakeResponse {
  string cake_id = 1; // ID созданного торта
}

/* ############### CreateFilling ############### */
message CreateFillingRequest {
  string name = 1;        // Название начинки
  bytes image_data = 2;   // Данные изображения начинки
  string content = 3;     // Состав начинки
  double kg_price = 4;    // Цена за кг
  string description = 5; // Описание начинки
}

message CreateFillingResponse {
  Filling filling = 1; // Созданная начинка
}

/* ############### CreateCategory ############### */
message CreateCategoryRequest {
  string name = 1;
  bytes image_data = 2;
}

message CreateCategoryResponse {
  Category category = 1;
}

/* ############### Categories ############### */
message CategoriesResponse {
  repeated Category categories = 1;
}

/* ############### Fillings ############### */
message FillingsResponse {
  repeated Filling fillings = 1;
}

/* ############### CakesResponse ############### */
message CakesResponse {
  repeated PreviewCake cakes = 1;
}

/* ############### GetCategoriesByGenderName ############### */
message GetCategoriesByGenderNameReq {
  CategoryGender categoryGender = 1;
}

message GetCategoriesByGenderNameRes {
  repeated Category categories = 1;
}

/* ############### CategoryPreviewCakes ############### */
message CategoryPreviewCakesReq {
  string categoryID = 1;
}

message CategoryPreviewCakesRes {
  repeated PreviewCake previewCakes = 1;
}

/* ############### AddCakeColors ############### */

message AddCakeColorsReq {
  string cakeID = 1;
  repeated string colorsHex = 2;
}

/* ############### CakeColors ############### */

message CakeColorsRes {
  repeated string colorsHex = 1;
}

/* ############### Add3DModel ############### */
message Add3DModelReq {
  bytes modelFileData = 1;
  string cakeID = 2;
}

message Add3DModelRes {
  string model3DURL = 1;
}

/* ############### CakeService ############### */
service CakeService {
  rpc CreateCake (CreateCakeRequest) returns (CreateCakeResponse);
  rpc Cake (CakeRequest) returns (CakeResponse);
  rpc Cakes (google.protobuf.Empty) returns (CakesResponse);
  rpc CategoryPreviewCakes (CategoryPreviewCakesReq) returns (CategoryPreviewCakesRes);

  rpc CreateFilling (CreateFillingRequest) returns (CreateFillingResponse);
  rpc Fillings (google.protobuf.Empty) returns (FillingsResponse);
  rpc AddCakeColors(AddCakeColorsReq) returns (google.protobuf.Empty);
  rpc GetColors(google.protobuf.Empty) returns (CakeColorsRes);
  rpc Add3DModel(Add3DModelReq) returns (Add3DModelRes);

  rpc CreateCategory (CreateCategoryRequest) returns (CreateCategoryResponse);
  rpc Categories (google.protobuf.Empty) returns (CategoriesResponse);
  rpc GetCategoriesByGenderName(GetCategoriesByGenderNameReq) returns (GetCategoriesByGenderNameRes);
}

// Информация о торте
message Cake {
  string id = 1;                                             // ID торта
  string name = 2;                                           // Название торта
  string image_url = 3;                                      // URL изображения торта
  double kg_price = 4;                                       // Цена за кг
  int32 rating = 5;                                          // Рейтинг (0-5)
  string description = 6;                                    // Описание торта
  double mass = 7;                                           // Масса торта
  bool is_open_for_sale = 8;                                 // Доступен ли для продажи
  User owner = 9;                                            // Информация о владельце
  repeated Filling fillings = 10;                            // Список начинок
  repeated Category categories = 11;                         // Список категорий
  optional double discount_kg_price = 12;                    // Скидочная цена за кг
  optional google.protobuf.Timestamp discount_end_time = 13; // Время окончания акции (ISO 8601)
  google.protobuf.Timestamp date_creation = 14;              // Дата создания торта (ISO 8601)
  repeated CakeImage images = 15;                            // Фотографии торта
  int32 reviewsCount = 16;                                   // Число отзывов
  optional string model3DURL = 17;                           // 3D model url

  message CakeImage {
    string id = 1;
    string image_url = 2;
  }
}

// Информация о владельце
message User {
  string id = 1;                                   // ID пользователя
  google.protobuf.StringValue fio = 2;             // Полное имя
  string nickname = 3;                             // Никнейм
  string mail = 4;                                 // Электронная почта
  google.protobuf.StringValue phone = 6;           // Телефон
  google.protobuf.StringValue imageURL = 7;        // Аватарка
  google.protobuf.StringValue headerImageURL = 8;  // Шапка профиля
}

// Информация о начинке
message Filling {
  string id = 1;          // ID начинки
  string name = 2;        // Название начинки
  string image_url = 3;   // URL изображения начинки
  string content = 4;     // Состав начинки
  double kg_price = 5;    // Цена за кг
  string description = 6; // Описание начинки
}

// Информация о категории
message Category {
  string id = 1;        // ID категории
  string name = 2;      // Название категории
  string image_url = 3; // URL изображения категории
  repeated CategoryGender gender_tags = 4; // Теги категории (по полу)
}

enum CategoryGender {
  CATEGORY_GENDER_UNSPECIFIED = 0;
  MALE = 1;
  FEMALE = 2;
  CHILD = 3;
}

message PreviewCake {
  string id = 1;                                        // UUID
  string name = 2;                                      // Название
  string preview_image_url = 3;                         // URL изображения
  double kg_price = 4;                                  // Цена за килограмм
  uint32 rating = 5;                                    // Рейтинг
  google.protobuf.StringValue description = 6;          // Описание (nullable)
  double mass = 7;                                      // Масса
  google.protobuf.DoubleValue discount_kg_price = 8;    // Скидочная цена за кг (nullable)
  google.protobuf.Timestamp discount_end_time = 9;      // Время окончания скидки (nullable)
  google.protobuf.Timestamp date_creation = 10;         // Время создания
  bool is_open_for_sale = 11;                           // Продается ли
  User owner = 12;                                      // Владелец
  int32 reviewsCount = 13;                              // Число отзывов
  repeated string colorsHex = 14;                       // Hex цвета торта
  optional string model3DURL = 15;                      // 3D model url
}