syntax = "proto3";

import "google/protobuf/empty.proto";
import "google/protobuf/wrappers.proto";
import "cake.proto";

package profile;
option go_package = "2025_CakeLand_API/internal/pkg/profile/delivery/grpc/generated";

/* ############### GetUserInfo ############### */
message GetUserInfoRes {
  UserInfo userInfo = 1;
}

/* ############### GetUserInfoByID ############### */
message GetUserInfoByIDReq {
  string userID = 1;
}

message GetUserInfoByIDRes {
  Profile user = 1;
}

/* ############### GetUserAddresses ############### */
message GetUserAddressesRes {
  repeated Address addresses = 1;
}

/* ############### UpdateUserAddresses ############### */
message UpdateUserAddressesReq {
  string addressID = 1;               // Код адреса
  optional string entrance = 6;       // Подъезд (опционально)
  optional string floor = 7;          // Этаж (опционально)
  optional string apartment = 8;      // Квартира (опционально)
  optional string comment = 9;        // Комментарий к доставке
}

message UpdateUserAddressesRes {
  Address address = 1;
}

/* ############### CreateAddress ############### */
message CreateAddressReq {
  double latitude = 1;
  double longitude = 2;
  string formattedAddress = 3;
}

message CreateAddressRes {
  Address address = 1;
}

/* ############### UpdateUserData ############### */
message UpdateUserDataReq {
  string updatedUserName = 1;
  optional string updatedFIO = 2;
}

message UpdateUserDataRes {
}

/* ############### UpdateUserImage ############### */
message UpdateUserImageReq {
  bytes imageData = 1;
  ImageKind imageKind = 2;

  enum ImageKind {
    AVATAR = 0;  // Аватар пользователя
    HEADER = 1;  // Изображение для шапки профиля
  }
}

message UpdateUserImageRes {
  string imageURL = 1;
}

/* ############### ProfileService ############### */
service ProfileService {
  rpc GetUserInfo(google.protobuf.Empty) returns (GetUserInfoRes);
  rpc GetUserInfoByID(GetUserInfoByIDReq) returns (GetUserInfoByIDRes);
  rpc GetUserAddresses(google.protobuf.Empty) returns (GetUserAddressesRes);
  rpc UpdateUserAddresses(UpdateUserAddressesReq) returns (UpdateUserAddressesRes);
  rpc CreateAddress(CreateAddressReq) returns (CreateAddressRes);
  rpc UpdateUserData(UpdateUserDataReq) returns (UpdateUserDataRes);
  rpc UpdateUserImage(UpdateUserImageReq) returns (UpdateUserImageRes);
}

message Profile {
  string id = 1;
  google.protobuf.StringValue fio = 2;
  string nickname = 4;
  google.protobuf.StringValue image_url = 5;
  google.protobuf.StringValue header_image_url = 6;
  string mail = 7;
  google.protobuf.StringValue phone = 8;
  google.protobuf.StringValue card_number = 9;
}

message UserInfo {
  Profile user = 1;
  repeated cake.PreviewCake cakes = 2;
}

// Сообщение для адреса
message Address {
  string id = 1;                      // UUID адреса
  double latitude = 3;                // Широта
  double longitude = 4;               // Долгота
  string formattedAddress = 5;        // Форматированный адрес
  optional string entrance = 6;       // Подъезд (опционально)
  optional string floor = 7;          // Этаж (опционально)
  optional string apartment = 8;      // Квартира (опционально)
  optional string comment = 9;        // Комментарий к доставке
}