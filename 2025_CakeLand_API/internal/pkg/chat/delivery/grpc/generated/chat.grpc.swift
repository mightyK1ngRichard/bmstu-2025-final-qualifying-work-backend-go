//
// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the protocol buffer compiler.
// Source: chat.proto
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// ################# ChatService ################# 
///
/// Usage: instantiate `Chat_ChatServiceClient`, then call methods of this protocol to make API calls.
internal protocol Chat_ChatServiceClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Chat_ChatServiceClientInterceptorFactoryProtocol? { get }

  func chatHistory(
    _ request: Chat_ChatHistoryRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Chat_ChatHistoryRequest, Chat_ChatHistoryResponse>

  func chat(
    callOptions: CallOptions?,
    handler: @escaping (Chat_ChatMessage) -> Void
  ) -> BidirectionalStreamingCall<Chat_ChatMessage, Chat_ChatMessage>

  func userChats(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions?
  ) -> UnaryCall<SwiftProtobuf.Google_Protobuf_Empty, Chat_UserChatsResponse>
}

extension Chat_ChatServiceClientProtocol {
  internal var serviceName: String {
    return "chat.ChatService"
  }

  /// Unary call to ChatHistory
  ///
  /// - Parameters:
  ///   - request: Request to send to ChatHistory.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func chatHistory(
    _ request: Chat_ChatHistoryRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Chat_ChatHistoryRequest, Chat_ChatHistoryResponse> {
    return self.makeUnaryCall(
      path: Chat_ChatServiceClientMetadata.Methods.chatHistory.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeChatHistoryInterceptors() ?? []
    )
  }

  /// Bidirectional streaming call to Chat
  ///
  /// Callers should use the `send` method on the returned object to send messages
  /// to the server. The caller should send an `.end` after the final message has been sent.
  ///
  /// - Parameters:
  ///   - callOptions: Call options.
  ///   - handler: A closure called when each response is received from the server.
  /// - Returns: A `ClientStreamingCall` with futures for the metadata and status.
  internal func chat(
    callOptions: CallOptions? = nil,
    handler: @escaping (Chat_ChatMessage) -> Void
  ) -> BidirectionalStreamingCall<Chat_ChatMessage, Chat_ChatMessage> {
    return self.makeBidirectionalStreamingCall(
      path: Chat_ChatServiceClientMetadata.Methods.chat.path,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeChatInterceptors() ?? [],
      handler: handler
    )
  }

  /// Unary call to UserChats
  ///
  /// - Parameters:
  ///   - request: Request to send to UserChats.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func userChats(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<SwiftProtobuf.Google_Protobuf_Empty, Chat_UserChatsResponse> {
    return self.makeUnaryCall(
      path: Chat_ChatServiceClientMetadata.Methods.userChats.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUserChatsInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Chat_ChatServiceClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Chat_ChatServiceNIOClient")
internal final class Chat_ChatServiceClient: Chat_ChatServiceClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Chat_ChatServiceClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: Chat_ChatServiceClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the chat.ChatService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Chat_ChatServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct Chat_ChatServiceNIOClient: Chat_ChatServiceClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Chat_ChatServiceClientInterceptorFactoryProtocol?

  /// Creates a client for the chat.ChatService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Chat_ChatServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// ################# ChatService ################# 
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Chat_ChatServiceAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Chat_ChatServiceClientInterceptorFactoryProtocol? { get }

  func makeChatHistoryCall(
    _ request: Chat_ChatHistoryRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Chat_ChatHistoryRequest, Chat_ChatHistoryResponse>

  func makeChatCall(
    callOptions: CallOptions?
  ) -> GRPCAsyncBidirectionalStreamingCall<Chat_ChatMessage, Chat_ChatMessage>

  func makeUserChatsCall(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<SwiftProtobuf.Google_Protobuf_Empty, Chat_UserChatsResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Chat_ChatServiceAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Chat_ChatServiceClientMetadata.serviceDescriptor
  }

  internal var interceptors: Chat_ChatServiceClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeChatHistoryCall(
    _ request: Chat_ChatHistoryRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Chat_ChatHistoryRequest, Chat_ChatHistoryResponse> {
    return self.makeAsyncUnaryCall(
      path: Chat_ChatServiceClientMetadata.Methods.chatHistory.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeChatHistoryInterceptors() ?? []
    )
  }

  internal func makeChatCall(
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncBidirectionalStreamingCall<Chat_ChatMessage, Chat_ChatMessage> {
    return self.makeAsyncBidirectionalStreamingCall(
      path: Chat_ChatServiceClientMetadata.Methods.chat.path,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeChatInterceptors() ?? []
    )
  }

  internal func makeUserChatsCall(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<SwiftProtobuf.Google_Protobuf_Empty, Chat_UserChatsResponse> {
    return self.makeAsyncUnaryCall(
      path: Chat_ChatServiceClientMetadata.Methods.userChats.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUserChatsInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Chat_ChatServiceAsyncClientProtocol {
  internal func chatHistory(
    _ request: Chat_ChatHistoryRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Chat_ChatHistoryResponse {
    return try await self.performAsyncUnaryCall(
      path: Chat_ChatServiceClientMetadata.Methods.chatHistory.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeChatHistoryInterceptors() ?? []
    )
  }

  internal func chat<RequestStream>(
    _ requests: RequestStream,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncResponseStream<Chat_ChatMessage> where RequestStream: Sequence, RequestStream.Element == Chat_ChatMessage {
    return self.performAsyncBidirectionalStreamingCall(
      path: Chat_ChatServiceClientMetadata.Methods.chat.path,
      requests: requests,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeChatInterceptors() ?? []
    )
  }

  internal func chat<RequestStream>(
    _ requests: RequestStream,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncResponseStream<Chat_ChatMessage> where RequestStream: AsyncSequence & Sendable, RequestStream.Element == Chat_ChatMessage {
    return self.performAsyncBidirectionalStreamingCall(
      path: Chat_ChatServiceClientMetadata.Methods.chat.path,
      requests: requests,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeChatInterceptors() ?? []
    )
  }

  internal func userChats(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions? = nil
  ) async throws -> Chat_UserChatsResponse {
    return try await self.performAsyncUnaryCall(
      path: Chat_ChatServiceClientMetadata.Methods.userChats.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUserChatsInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct Chat_ChatServiceAsyncClient: Chat_ChatServiceAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Chat_ChatServiceClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Chat_ChatServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

internal protocol Chat_ChatServiceClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'chatHistory'.
  func makeChatHistoryInterceptors() -> [ClientInterceptor<Chat_ChatHistoryRequest, Chat_ChatHistoryResponse>]

  /// - Returns: Interceptors to use when invoking 'chat'.
  func makeChatInterceptors() -> [ClientInterceptor<Chat_ChatMessage, Chat_ChatMessage>]

  /// - Returns: Interceptors to use when invoking 'userChats'.
  func makeUserChatsInterceptors() -> [ClientInterceptor<SwiftProtobuf.Google_Protobuf_Empty, Chat_UserChatsResponse>]
}

internal enum Chat_ChatServiceClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "ChatService",
    fullName: "chat.ChatService",
    methods: [
      Chat_ChatServiceClientMetadata.Methods.chatHistory,
      Chat_ChatServiceClientMetadata.Methods.chat,
      Chat_ChatServiceClientMetadata.Methods.userChats,
    ]
  )

  internal enum Methods {
    internal static let chatHistory = GRPCMethodDescriptor(
      name: "ChatHistory",
      path: "/chat.ChatService/ChatHistory",
      type: GRPCCallType.unary
    )

    internal static let chat = GRPCMethodDescriptor(
      name: "Chat",
      path: "/chat.ChatService/Chat",
      type: GRPCCallType.bidirectionalStreaming
    )

    internal static let userChats = GRPCMethodDescriptor(
      name: "UserChats",
      path: "/chat.ChatService/UserChats",
      type: GRPCCallType.unary
    )
  }
}

/// ################# ChatService ################# 
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol Chat_ChatServiceProvider: CallHandlerProvider {
  var interceptors: Chat_ChatServiceServerInterceptorFactoryProtocol? { get }

  func chatHistory(request: Chat_ChatHistoryRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Chat_ChatHistoryResponse>

  func chat(context: StreamingResponseCallContext<Chat_ChatMessage>) -> EventLoopFuture<(StreamEvent<Chat_ChatMessage>) -> Void>

  func userChats(request: SwiftProtobuf.Google_Protobuf_Empty, context: StatusOnlyCallContext) -> EventLoopFuture<Chat_UserChatsResponse>
}

extension Chat_ChatServiceProvider {
  internal var serviceName: Substring {
    return Chat_ChatServiceServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "ChatHistory":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Chat_ChatHistoryRequest>(),
        responseSerializer: ProtobufSerializer<Chat_ChatHistoryResponse>(),
        interceptors: self.interceptors?.makeChatHistoryInterceptors() ?? [],
        userFunction: self.chatHistory(request:context:)
      )

    case "Chat":
      return BidirectionalStreamingServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Chat_ChatMessage>(),
        responseSerializer: ProtobufSerializer<Chat_ChatMessage>(),
        interceptors: self.interceptors?.makeChatInterceptors() ?? [],
        observerFactory: self.chat(context:)
      )

    case "UserChats":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        responseSerializer: ProtobufSerializer<Chat_UserChatsResponse>(),
        interceptors: self.interceptors?.makeUserChatsInterceptors() ?? [],
        userFunction: self.userChats(request:context:)
      )

    default:
      return nil
    }
  }
}

/// ################# ChatService ################# 
///
/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Chat_ChatServiceAsyncProvider: CallHandlerProvider, Sendable {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Chat_ChatServiceServerInterceptorFactoryProtocol? { get }

  func chatHistory(
    request: Chat_ChatHistoryRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Chat_ChatHistoryResponse

  func chat(
    requestStream: GRPCAsyncRequestStream<Chat_ChatMessage>,
    responseStream: GRPCAsyncResponseStreamWriter<Chat_ChatMessage>,
    context: GRPCAsyncServerCallContext
  ) async throws

  func userChats(
    request: SwiftProtobuf.Google_Protobuf_Empty,
    context: GRPCAsyncServerCallContext
  ) async throws -> Chat_UserChatsResponse
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Chat_ChatServiceAsyncProvider {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Chat_ChatServiceServerMetadata.serviceDescriptor
  }

  internal var serviceName: Substring {
    return Chat_ChatServiceServerMetadata.serviceDescriptor.fullName[...]
  }

  internal var interceptors: Chat_ChatServiceServerInterceptorFactoryProtocol? {
    return nil
  }

  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "ChatHistory":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Chat_ChatHistoryRequest>(),
        responseSerializer: ProtobufSerializer<Chat_ChatHistoryResponse>(),
        interceptors: self.interceptors?.makeChatHistoryInterceptors() ?? [],
        wrapping: { try await self.chatHistory(request: $0, context: $1) }
      )

    case "Chat":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Chat_ChatMessage>(),
        responseSerializer: ProtobufSerializer<Chat_ChatMessage>(),
        interceptors: self.interceptors?.makeChatInterceptors() ?? [],
        wrapping: { try await self.chat(requestStream: $0, responseStream: $1, context: $2) }
      )

    case "UserChats":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        responseSerializer: ProtobufSerializer<Chat_UserChatsResponse>(),
        interceptors: self.interceptors?.makeUserChatsInterceptors() ?? [],
        wrapping: { try await self.userChats(request: $0, context: $1) }
      )

    default:
      return nil
    }
  }
}

internal protocol Chat_ChatServiceServerInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when handling 'chatHistory'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeChatHistoryInterceptors() -> [ServerInterceptor<Chat_ChatHistoryRequest, Chat_ChatHistoryResponse>]

  /// - Returns: Interceptors to use when handling 'chat'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeChatInterceptors() -> [ServerInterceptor<Chat_ChatMessage, Chat_ChatMessage>]

  /// - Returns: Interceptors to use when handling 'userChats'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeUserChatsInterceptors() -> [ServerInterceptor<SwiftProtobuf.Google_Protobuf_Empty, Chat_UserChatsResponse>]
}

internal enum Chat_ChatServiceServerMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "ChatService",
    fullName: "chat.ChatService",
    methods: [
      Chat_ChatServiceServerMetadata.Methods.chatHistory,
      Chat_ChatServiceServerMetadata.Methods.chat,
      Chat_ChatServiceServerMetadata.Methods.userChats,
    ]
  )

  internal enum Methods {
    internal static let chatHistory = GRPCMethodDescriptor(
      name: "ChatHistory",
      path: "/chat.ChatService/ChatHistory",
      type: GRPCCallType.unary
    )

    internal static let chat = GRPCMethodDescriptor(
      name: "Chat",
      path: "/chat.ChatService/Chat",
      type: GRPCCallType.bidirectionalStreaming
    )

    internal static let userChats = GRPCMethodDescriptor(
      name: "UserChats",
      path: "/chat.ChatService/UserChats",
      type: GRPCCallType.unary
    )
  }
}
