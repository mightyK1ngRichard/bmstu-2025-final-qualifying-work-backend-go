//
// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the protocol buffer compiler.
// Source: order.proto
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// ################# OrderService ################# 
///
/// Usage: instantiate `Order_OrderServiceClient`, then call methods of this protocol to make API calls.
internal protocol Order_OrderServiceClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Order_OrderServiceClientInterceptorFactoryProtocol? { get }

  func makeOrder(
    _ request: Order_MakeOrderReq,
    callOptions: CallOptions?
  ) -> UnaryCall<Order_MakeOrderReq, Order_MakeOrderRes>
}

extension Order_OrderServiceClientProtocol {
  internal var serviceName: String {
    return "order.OrderService"
  }

  /// Unary call to MakeOrder
  ///
  /// - Parameters:
  ///   - request: Request to send to MakeOrder.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func makeOrder(
    _ request: Order_MakeOrderReq,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Order_MakeOrderReq, Order_MakeOrderRes> {
    return self.makeUnaryCall(
      path: Order_OrderServiceClientMetadata.Methods.makeOrder.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeMakeOrderInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Order_OrderServiceClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Order_OrderServiceNIOClient")
internal final class Order_OrderServiceClient: Order_OrderServiceClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Order_OrderServiceClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: Order_OrderServiceClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the order.OrderService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Order_OrderServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct Order_OrderServiceNIOClient: Order_OrderServiceClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Order_OrderServiceClientInterceptorFactoryProtocol?

  /// Creates a client for the order.OrderService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Order_OrderServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// ################# OrderService ################# 
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Order_OrderServiceAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Order_OrderServiceClientInterceptorFactoryProtocol? { get }

  func makeMakeOrderCall(
    _ request: Order_MakeOrderReq,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Order_MakeOrderReq, Order_MakeOrderRes>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Order_OrderServiceAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Order_OrderServiceClientMetadata.serviceDescriptor
  }

  internal var interceptors: Order_OrderServiceClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeMakeOrderCall(
    _ request: Order_MakeOrderReq,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Order_MakeOrderReq, Order_MakeOrderRes> {
    return self.makeAsyncUnaryCall(
      path: Order_OrderServiceClientMetadata.Methods.makeOrder.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeMakeOrderInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Order_OrderServiceAsyncClientProtocol {
  internal func makeOrder(
    _ request: Order_MakeOrderReq,
    callOptions: CallOptions? = nil
  ) async throws -> Order_MakeOrderRes {
    return try await self.performAsyncUnaryCall(
      path: Order_OrderServiceClientMetadata.Methods.makeOrder.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeMakeOrderInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct Order_OrderServiceAsyncClient: Order_OrderServiceAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Order_OrderServiceClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Order_OrderServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

internal protocol Order_OrderServiceClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'makeOrder'.
  func makeMakeOrderInterceptors() -> [ClientInterceptor<Order_MakeOrderReq, Order_MakeOrderRes>]
}

internal enum Order_OrderServiceClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "OrderService",
    fullName: "order.OrderService",
    methods: [
      Order_OrderServiceClientMetadata.Methods.makeOrder,
    ]
  )

  internal enum Methods {
    internal static let makeOrder = GRPCMethodDescriptor(
      name: "MakeOrder",
      path: "/order.OrderService/MakeOrder",
      type: GRPCCallType.unary
    )
  }
}

/// ################# OrderService ################# 
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol Order_OrderServiceProvider: CallHandlerProvider {
  var interceptors: Order_OrderServiceServerInterceptorFactoryProtocol? { get }

  func makeOrder(request: Order_MakeOrderReq, context: StatusOnlyCallContext) -> EventLoopFuture<Order_MakeOrderRes>
}

extension Order_OrderServiceProvider {
  internal var serviceName: Substring {
    return Order_OrderServiceServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "MakeOrder":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Order_MakeOrderReq>(),
        responseSerializer: ProtobufSerializer<Order_MakeOrderRes>(),
        interceptors: self.interceptors?.makeMakeOrderInterceptors() ?? [],
        userFunction: self.makeOrder(request:context:)
      )

    default:
      return nil
    }
  }
}

/// ################# OrderService ################# 
///
/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Order_OrderServiceAsyncProvider: CallHandlerProvider, Sendable {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Order_OrderServiceServerInterceptorFactoryProtocol? { get }

  func makeOrder(
    request: Order_MakeOrderReq,
    context: GRPCAsyncServerCallContext
  ) async throws -> Order_MakeOrderRes
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Order_OrderServiceAsyncProvider {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Order_OrderServiceServerMetadata.serviceDescriptor
  }

  internal var serviceName: Substring {
    return Order_OrderServiceServerMetadata.serviceDescriptor.fullName[...]
  }

  internal var interceptors: Order_OrderServiceServerInterceptorFactoryProtocol? {
    return nil
  }

  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "MakeOrder":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Order_MakeOrderReq>(),
        responseSerializer: ProtobufSerializer<Order_MakeOrderRes>(),
        interceptors: self.interceptors?.makeMakeOrderInterceptors() ?? [],
        wrapping: { try await self.makeOrder(request: $0, context: $1) }
      )

    default:
      return nil
    }
  }
}

internal protocol Order_OrderServiceServerInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when handling 'makeOrder'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeMakeOrderInterceptors() -> [ServerInterceptor<Order_MakeOrderReq, Order_MakeOrderRes>]
}

internal enum Order_OrderServiceServerMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "OrderService",
    fullName: "order.OrderService",
    methods: [
      Order_OrderServiceServerMetadata.Methods.makeOrder,
    ]
  )

  internal enum Methods {
    internal static let makeOrder = GRPCMethodDescriptor(
      name: "MakeOrder",
      path: "/order.OrderService/MakeOrder",
      type: GRPCCallType.unary
    )
  }
}
