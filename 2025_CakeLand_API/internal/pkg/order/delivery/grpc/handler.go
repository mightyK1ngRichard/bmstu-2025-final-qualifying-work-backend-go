package handler

import (
	"2025_CakeLand_API/internal/domains"
	"2025_CakeLand_API/internal/models"
	"2025_CakeLand_API/internal/models/errs"
	"2025_CakeLand_API/internal/pkg/notification/delivery/grpc/generated"
	"2025_CakeLand_API/internal/pkg/order"
	gen "2025_CakeLand_API/internal/pkg/order/delivery/grpc/generated"
	md "2025_CakeLand_API/internal/pkg/utils/metadata"
	"context"
	"fmt"
	"google.golang.org/grpc/metadata"
	"google.golang.org/protobuf/types/known/emptypb"
	"log/slog"
)

type OrderHandler struct {
	gen.UnimplementedOrderServiceServer

	log        *slog.Logger
	usecase    order.IOrderUsecase
	mdProvider *md.MetadataProvider
	nc         generated.NotificationServiceClient
}

func NewOrderHandler(
	log *slog.Logger,
	usecase order.IOrderUsecase,
	mdProvider *md.MetadataProvider,
	nc generated.NotificationServiceClient,
) *OrderHandler {
	return &OrderHandler{
		log:        log,
		usecase:    usecase,
		mdProvider: mdProvider,
		nc:         nc,
	}
}

func (h *OrderHandler) GetAllOrders(ctx context.Context, _ *emptypb.Empty) (*gen.GetAllOrdersRes, error) {
	// –ë–∏–∑–Ω–µ—Å –ª–æ–≥–∏–∫–∞
	orders, err := h.usecase.GetAllOrders(ctx)
	if err != nil {
		return nil, errs.ConvertToGrpcError(ctx, h.log, err, "failed to get all orders")
	}

	// –û—Ç–≤–µ—Ç
	res := make([]*gen.Order, len(orders))
	for i, orderItem := range orders {
		res[i] = orderItem.ToProto()
	}

	return &gen.GetAllOrdersRes{
		Orders: res,
	}, nil
}

func (h *OrderHandler) UpdateOrderStatus(ctx context.Context, in *gen.UpdateOrderStateReq) (*emptypb.Empty, error) {
	// –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
	_, convertedErr := h.getAccessToken(ctx)
	if convertedErr != nil {
		return nil, convertedErr
	}

	// –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å
	updatedStatus := models.InitFromProtoOrderStatus(in.UpdatedStatus)

	// –ë–∏–∑–Ω–µ—Å –ª–æ–≥–∏–∫–∞
	customerID, sellerID, err := h.usecase.UpdateOrderStatus(ctx, updatedStatus, in.OrderID)
	if err != nil {
		return nil, errs.ConvertToGrpcError(ctx, h.log, err, "failed to update order")
	}

	// –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
	go func() {
		h.sendOrderStatusUpdatedNotification(ctx, customerID, in.OrderID, updatedStatus)
	}()
	go func() {
		h.sendOrderStatusUpdatedNotification(ctx, sellerID, in.OrderID, updatedStatus)
	}()

	// –û—Ç–≤–µ—Ç
	return &emptypb.Empty{}, nil
}

func (h *OrderHandler) Orders(ctx context.Context, _ *emptypb.Empty) (*gen.OrdersRes, error) {
	// –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
	accessToken, convertedErr := h.getAccessToken(ctx)
	if convertedErr != nil {
		return nil, convertedErr
	}

	// –ë–∏–∑–Ω–µ—Å –ª–æ–≥–∏–∫–∞
	orders, err := h.usecase.Orders(ctx, accessToken)
	if err != nil {
		return nil, errs.ConvertToGrpcError(ctx, h.log, err, "failed to fetch orders")
	}

	// –û—Ç–≤–µ—Ç
	res := make([]*gen.Order, len(orders))
	for i, orderItem := range orders {
		res[i] = orderItem.ToProto()
	}

	return &gen.OrdersRes{
		Orders: res,
	}, nil
}

func (h *OrderHandler) OrderByID(ctx context.Context, in *gen.OrderByIDReq) (*gen.OrderByIDRes, error) {
	// –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
	accessToken, convertedErr := h.getAccessToken(ctx)
	if convertedErr != nil {
		return nil, convertedErr
	}

	// –ë–∏–∑–Ω–µ—Å –ª–æ–≥–∏–∫–∞
	orderModel, err := h.usecase.OrderByID(ctx, accessToken, in.OrderID)
	if err != nil {
		return nil, errs.ConvertToGrpcError(ctx, h.log, err, "failed to fetch order by ID")
	}

	// –û—Ç–≤–µ—Ç
	return &gen.OrderByIDRes{
		Order: orderModel.ToProto(),
	}, nil
}

func (h *OrderHandler) MakeOrder(ctx context.Context, in *gen.MakeOrderReq) (*gen.MakeOrderRes, error) {
	// –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
	accessToken, convertedErr := h.getAccessToken(ctx)
	if convertedErr != nil {
		return nil, convertedErr
	}

	// –ú–∞–ø–ø–∏–º –º–æ–¥–µ–ª—å
	dbOrder, err := models.Init(in)
	if err != nil {
		return nil, errs.ConvertToGrpcError(ctx, h.log, err, "failed to init order")
	}

	// –ë–∏–∑–Ω–µ—Å –ª–æ–≥–∏–∫–∞
	createdOrder, err := h.usecase.MakeOrder(ctx, accessToken, dbOrder)
	if err != nil {
		return nil, errs.ConvertToGrpcError(ctx, h.log, err, "failed to make order")
	}

	// –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
	go func() {
		// –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –ø—Ä–æ–¥–∞–≤—Ü–∞
		h.sendOrderNotification(ctx, createdOrder.SellerID.String(), createdOrder.ID.String(),
			"–ó–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω", "–í–∞—à –∑–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω –∏ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ üéÇ")
	}()

	go func() {
		// –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –ø–æ–∫—É–ø–∞—Ç–µ–ª—è
		h.sendOrderNotification(ctx, createdOrder.CustomerID.String(), createdOrder.ID.String(),
			"–¢–æ—Ä—Ç –∑–∞–∫–∞–∑–∞–Ω", "–£ –≤–∞—Å –∑–∞–∫–∞–∑–∞–ª–∏ —Ç–æ—Ä—Ç! üéÇ –í–∞—à –∑–∞–∫–∞–∑ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ.")
	}()

	// –û—Ç–≤–µ—Ç
	return &gen.MakeOrderRes{
		OrderID: createdOrder.ID.String(),
	}, nil
}

func (h *OrderHandler) getAccessToken(ctx context.Context) (string, error) {
	accessToken, err := h.mdProvider.GetValue(ctx, domains.KeyAuthorization)
	if err != nil {
		return "", errs.ConvertToGrpcError(ctx, h.log, err, fmt.Sprintf("missing required metadata: %s", domains.KeyAuthorization))
	}

	return accessToken, nil
}

func (h *OrderHandler) sendOrderNotification(ctx context.Context, userID, orderID, messageTitle, messageBody string) {
	// –ò–∑–≤–ª–µ–∫–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∏–∑ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
	md, ok := metadata.FromIncomingContext(ctx)
	if !ok {
		h.log.Error("–Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞")
		return
	}

	// –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏ –∏–∑ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
	newCtx := metadata.NewOutgoingContext(context.Background(), md)

	req := &generated.CreateNotificationRequest{
		Title:       messageTitle,
		Message:     messageBody,
		OrderID:     &orderID,
		RecipientID: userID,
		Kind:        generated.NotificationKind_ORDER_UPDATE,
	}

	_, err := h.nc.CreateNotification(newCtx, req)
	if err != nil {
		h.log.Error("–Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ", "error", err)
	}
}

func (h *OrderHandler) sendOrderStatusUpdatedNotification(ctx context.Context, userID, orderID string, status models.OrderStatus) {
	// –ò–∑–≤–ª–µ–∫–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∏–∑ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
	md, ok := metadata.FromIncomingContext(ctx)
	if !ok {
		h.log.Error("–Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞")
		return
	}

	// –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏ –∏–∑ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
	newCtx := metadata.NewOutgoingContext(context.Background(), md)

	// –ü–æ–ª—É—á–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞
	title, message := getStatusNotificationText(status)
	req := &generated.CreateNotificationRequest{
		Title:       title,
		Message:     message,
		OrderID:     &orderID,
		RecipientID: userID,
		Kind:        generated.NotificationKind_ORDER_UPDATE,
	}

	_, err := h.nc.CreateNotification(newCtx, req)
	if err != nil {
		h.log.Error("–Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞", "error", err)
	}
}

func getStatusNotificationText(status models.OrderStatus) (title, message string) {
	switch status {
	case models.OrderStatusPending:
		return "–û–∂–∏–¥–∞–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏", "–í–∞—à –∑–∞–∫–∞–∑ –æ–∂–∏–¥–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ üç∞"
	case models.OrderStatusShipped:
		return "–ó–∞–∫–∞–∑ –≤ –ø—É—Ç–∏", "–í–∞—à –∑–∞–∫–∞–∑ —É–∂–µ –≤ –ø—É—Ç–∏ –∫ –≤–∞–º üöö"
	case models.OrderStatusDelivered:
		return "–î–æ—Å—Ç–∞–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞", "–í–∞—à –∑–∞–∫–∞–∑ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω, –ø—Ä–∏—è—Ç–Ω–æ–≥–æ –∞–ø–ø–µ—Ç–∏—Ç–∞! üéâ"
	case models.OrderStatusCancelled:
		return "–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω—ë–Ω", "–í–∞—à –∑–∞–∫–∞–∑ –±—ã–ª –æ—Ç–º–µ–Ω—ë–Ω ‚ùå"
	default:
		return "–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞", "–°—Ç–∞—Ç—É—Å –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞ –æ–±–Ω–æ–≤–ª—ë–Ω"
	}
}
