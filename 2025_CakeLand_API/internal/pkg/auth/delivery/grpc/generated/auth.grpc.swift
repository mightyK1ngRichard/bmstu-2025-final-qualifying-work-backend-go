//
// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the protocol buffer compiler.
// Source: auth.proto
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// Usage: instantiate `AuthClient`, then call methods of this protocol to make API calls.
internal protocol AuthClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: AuthClientInterceptorFactoryProtocol? { get }

  func register(
    _ request: RegisterRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<RegisterRequest, RegisterResponse>

  func login(
    _ request: LoginRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<LoginRequest, LoginResponse>

  func updateAccessToken(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions?
  ) -> UnaryCall<SwiftProtobuf.Google_Protobuf_Empty, UpdateAccessTokenResponse>

  func logout(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions?
  ) -> UnaryCall<SwiftProtobuf.Google_Protobuf_Empty, LogoutResponse>
}

extension AuthClientProtocol {
  internal var serviceName: String {
    return "Auth"
  }

  /// Unary call to Register
  ///
  /// - Parameters:
  ///   - request: Request to send to Register.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func register(
    _ request: RegisterRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<RegisterRequest, RegisterResponse> {
    return self.makeUnaryCall(
      path: AuthClientMetadata.Methods.register.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRegisterInterceptors() ?? []
    )
  }

  /// Unary call to Login
  ///
  /// - Parameters:
  ///   - request: Request to send to Login.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func login(
    _ request: LoginRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<LoginRequest, LoginResponse> {
    return self.makeUnaryCall(
      path: AuthClientMetadata.Methods.login.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeLoginInterceptors() ?? []
    )
  }

  /// Unary call to UpdateAccessToken
  ///
  /// - Parameters:
  ///   - request: Request to send to UpdateAccessToken.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func updateAccessToken(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<SwiftProtobuf.Google_Protobuf_Empty, UpdateAccessTokenResponse> {
    return self.makeUnaryCall(
      path: AuthClientMetadata.Methods.updateAccessToken.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateAccessTokenInterceptors() ?? []
    )
  }

  /// Unary call to Logout
  ///
  /// - Parameters:
  ///   - request: Request to send to Logout.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func logout(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<SwiftProtobuf.Google_Protobuf_Empty, LogoutResponse> {
    return self.makeUnaryCall(
      path: AuthClientMetadata.Methods.logout.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeLogoutInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension AuthClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "AuthNIOClient")
internal final class AuthClient: AuthClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: AuthClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: AuthClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the Auth service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: AuthClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct AuthNIOClient: AuthClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: AuthClientInterceptorFactoryProtocol?

  /// Creates a client for the Auth service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: AuthClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol AuthAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: AuthClientInterceptorFactoryProtocol? { get }

  func makeRegisterCall(
    _ request: RegisterRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<RegisterRequest, RegisterResponse>

  func makeLoginCall(
    _ request: LoginRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<LoginRequest, LoginResponse>

  func makeUpdateAccessTokenCall(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<SwiftProtobuf.Google_Protobuf_Empty, UpdateAccessTokenResponse>

  func makeLogoutCall(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<SwiftProtobuf.Google_Protobuf_Empty, LogoutResponse>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension AuthAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return AuthClientMetadata.serviceDescriptor
  }

  internal var interceptors: AuthClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeRegisterCall(
    _ request: RegisterRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<RegisterRequest, RegisterResponse> {
    return self.makeAsyncUnaryCall(
      path: AuthClientMetadata.Methods.register.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRegisterInterceptors() ?? []
    )
  }

  internal func makeLoginCall(
    _ request: LoginRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<LoginRequest, LoginResponse> {
    return self.makeAsyncUnaryCall(
      path: AuthClientMetadata.Methods.login.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeLoginInterceptors() ?? []
    )
  }

  internal func makeUpdateAccessTokenCall(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<SwiftProtobuf.Google_Protobuf_Empty, UpdateAccessTokenResponse> {
    return self.makeAsyncUnaryCall(
      path: AuthClientMetadata.Methods.updateAccessToken.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateAccessTokenInterceptors() ?? []
    )
  }

  internal func makeLogoutCall(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<SwiftProtobuf.Google_Protobuf_Empty, LogoutResponse> {
    return self.makeAsyncUnaryCall(
      path: AuthClientMetadata.Methods.logout.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeLogoutInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension AuthAsyncClientProtocol {
  internal func register(
    _ request: RegisterRequest,
    callOptions: CallOptions? = nil
  ) async throws -> RegisterResponse {
    return try await self.performAsyncUnaryCall(
      path: AuthClientMetadata.Methods.register.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeRegisterInterceptors() ?? []
    )
  }

  internal func login(
    _ request: LoginRequest,
    callOptions: CallOptions? = nil
  ) async throws -> LoginResponse {
    return try await self.performAsyncUnaryCall(
      path: AuthClientMetadata.Methods.login.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeLoginInterceptors() ?? []
    )
  }

  internal func updateAccessToken(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions? = nil
  ) async throws -> UpdateAccessTokenResponse {
    return try await self.performAsyncUnaryCall(
      path: AuthClientMetadata.Methods.updateAccessToken.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeUpdateAccessTokenInterceptors() ?? []
    )
  }

  internal func logout(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions? = nil
  ) async throws -> LogoutResponse {
    return try await self.performAsyncUnaryCall(
      path: AuthClientMetadata.Methods.logout.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeLogoutInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct AuthAsyncClient: AuthAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: AuthClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: AuthClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

internal protocol AuthClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'register'.
  func makeRegisterInterceptors() -> [ClientInterceptor<RegisterRequest, RegisterResponse>]

  /// - Returns: Interceptors to use when invoking 'login'.
  func makeLoginInterceptors() -> [ClientInterceptor<LoginRequest, LoginResponse>]

  /// - Returns: Interceptors to use when invoking 'updateAccessToken'.
  func makeUpdateAccessTokenInterceptors() -> [ClientInterceptor<SwiftProtobuf.Google_Protobuf_Empty, UpdateAccessTokenResponse>]

  /// - Returns: Interceptors to use when invoking 'logout'.
  func makeLogoutInterceptors() -> [ClientInterceptor<SwiftProtobuf.Google_Protobuf_Empty, LogoutResponse>]
}

internal enum AuthClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Auth",
    fullName: "Auth",
    methods: [
      AuthClientMetadata.Methods.register,
      AuthClientMetadata.Methods.login,
      AuthClientMetadata.Methods.updateAccessToken,
      AuthClientMetadata.Methods.logout,
    ]
  )

  internal enum Methods {
    internal static let register = GRPCMethodDescriptor(
      name: "Register",
      path: "/Auth/Register",
      type: GRPCCallType.unary
    )

    internal static let login = GRPCMethodDescriptor(
      name: "Login",
      path: "/Auth/Login",
      type: GRPCCallType.unary
    )

    internal static let updateAccessToken = GRPCMethodDescriptor(
      name: "UpdateAccessToken",
      path: "/Auth/UpdateAccessToken",
      type: GRPCCallType.unary
    )

    internal static let logout = GRPCMethodDescriptor(
      name: "Logout",
      path: "/Auth/Logout",
      type: GRPCCallType.unary
    )
  }
}

/// To build a server, implement a class that conforms to this protocol.
internal protocol AuthProvider: CallHandlerProvider {
  var interceptors: AuthServerInterceptorFactoryProtocol? { get }

  func register(request: RegisterRequest, context: StatusOnlyCallContext) -> EventLoopFuture<RegisterResponse>

  func login(request: LoginRequest, context: StatusOnlyCallContext) -> EventLoopFuture<LoginResponse>

  func updateAccessToken(request: SwiftProtobuf.Google_Protobuf_Empty, context: StatusOnlyCallContext) -> EventLoopFuture<UpdateAccessTokenResponse>

  func logout(request: SwiftProtobuf.Google_Protobuf_Empty, context: StatusOnlyCallContext) -> EventLoopFuture<LogoutResponse>
}

extension AuthProvider {
  internal var serviceName: Substring {
    return AuthServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Register":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<RegisterRequest>(),
        responseSerializer: ProtobufSerializer<RegisterResponse>(),
        interceptors: self.interceptors?.makeRegisterInterceptors() ?? [],
        userFunction: self.register(request:context:)
      )

    case "Login":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<LoginRequest>(),
        responseSerializer: ProtobufSerializer<LoginResponse>(),
        interceptors: self.interceptors?.makeLoginInterceptors() ?? [],
        userFunction: self.login(request:context:)
      )

    case "UpdateAccessToken":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        responseSerializer: ProtobufSerializer<UpdateAccessTokenResponse>(),
        interceptors: self.interceptors?.makeUpdateAccessTokenInterceptors() ?? [],
        userFunction: self.updateAccessToken(request:context:)
      )

    case "Logout":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        responseSerializer: ProtobufSerializer<LogoutResponse>(),
        interceptors: self.interceptors?.makeLogoutInterceptors() ?? [],
        userFunction: self.logout(request:context:)
      )

    default:
      return nil
    }
  }
}

/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol AuthAsyncProvider: CallHandlerProvider, Sendable {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: AuthServerInterceptorFactoryProtocol? { get }

  func register(
    request: RegisterRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> RegisterResponse

  func login(
    request: LoginRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> LoginResponse

  func updateAccessToken(
    request: SwiftProtobuf.Google_Protobuf_Empty,
    context: GRPCAsyncServerCallContext
  ) async throws -> UpdateAccessTokenResponse

  func logout(
    request: SwiftProtobuf.Google_Protobuf_Empty,
    context: GRPCAsyncServerCallContext
  ) async throws -> LogoutResponse
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension AuthAsyncProvider {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return AuthServerMetadata.serviceDescriptor
  }

  internal var serviceName: Substring {
    return AuthServerMetadata.serviceDescriptor.fullName[...]
  }

  internal var interceptors: AuthServerInterceptorFactoryProtocol? {
    return nil
  }

  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "Register":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<RegisterRequest>(),
        responseSerializer: ProtobufSerializer<RegisterResponse>(),
        interceptors: self.interceptors?.makeRegisterInterceptors() ?? [],
        wrapping: { try await self.register(request: $0, context: $1) }
      )

    case "Login":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<LoginRequest>(),
        responseSerializer: ProtobufSerializer<LoginResponse>(),
        interceptors: self.interceptors?.makeLoginInterceptors() ?? [],
        wrapping: { try await self.login(request: $0, context: $1) }
      )

    case "UpdateAccessToken":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        responseSerializer: ProtobufSerializer<UpdateAccessTokenResponse>(),
        interceptors: self.interceptors?.makeUpdateAccessTokenInterceptors() ?? [],
        wrapping: { try await self.updateAccessToken(request: $0, context: $1) }
      )

    case "Logout":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        responseSerializer: ProtobufSerializer<LogoutResponse>(),
        interceptors: self.interceptors?.makeLogoutInterceptors() ?? [],
        wrapping: { try await self.logout(request: $0, context: $1) }
      )

    default:
      return nil
    }
  }
}

internal protocol AuthServerInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when handling 'register'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeRegisterInterceptors() -> [ServerInterceptor<RegisterRequest, RegisterResponse>]

  /// - Returns: Interceptors to use when handling 'login'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeLoginInterceptors() -> [ServerInterceptor<LoginRequest, LoginResponse>]

  /// - Returns: Interceptors to use when handling 'updateAccessToken'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeUpdateAccessTokenInterceptors() -> [ServerInterceptor<SwiftProtobuf.Google_Protobuf_Empty, UpdateAccessTokenResponse>]

  /// - Returns: Interceptors to use when handling 'logout'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeLogoutInterceptors() -> [ServerInterceptor<SwiftProtobuf.Google_Protobuf_Empty, LogoutResponse>]
}

internal enum AuthServerMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "Auth",
    fullName: "Auth",
    methods: [
      AuthServerMetadata.Methods.register,
      AuthServerMetadata.Methods.login,
      AuthServerMetadata.Methods.updateAccessToken,
      AuthServerMetadata.Methods.logout,
    ]
  )

  internal enum Methods {
    internal static let register = GRPCMethodDescriptor(
      name: "Register",
      path: "/Auth/Register",
      type: GRPCCallType.unary
    )

    internal static let login = GRPCMethodDescriptor(
      name: "Login",
      path: "/Auth/Login",
      type: GRPCCallType.unary
    )

    internal static let updateAccessToken = GRPCMethodDescriptor(
      name: "UpdateAccessToken",
      path: "/Auth/UpdateAccessToken",
      type: GRPCCallType.unary
    )

    internal static let logout = GRPCMethodDescriptor(
      name: "Logout",
      path: "/Auth/Logout",
      type: GRPCCallType.unary
    )
  }
}
