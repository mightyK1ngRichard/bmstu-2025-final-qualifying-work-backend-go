// Code generated by MockGen. DO NOT EDIT.
// Source: internal/pkg/auth/interfaces.go

// Package mocks is a generated GoMock package.
package mocks

import (
	entities "2025_CakeLand_API/internal/pkg/auth/dto"
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIAuthUsecase is a mock of IAuthUsecase interface.
type MockIAuthUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockIAuthUsecaseMockRecorder
}

// MockIAuthUsecaseMockRecorder is the mock recorder for MockIAuthUsecase.
type MockIAuthUsecaseMockRecorder struct {
	mock *MockIAuthUsecase
}

// NewMockIAuthUsecase creates a new mock instance.
func NewMockIAuthUsecase(ctrl *gomock.Controller) *MockIAuthUsecase {
	mock := &MockIAuthUsecase{ctrl: ctrl}
	mock.recorder = &MockIAuthUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIAuthUsecase) EXPECT() *MockIAuthUsecaseMockRecorder {
	return m.recorder
}

// Login mocks base method.
func (m *MockIAuthUsecase) Login(arg0 context.Context, arg1 entities.LoginReq) (*entities.LoginRes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Login", arg0, arg1)
	ret0, _ := ret[0].(*entities.LoginRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Login indicates an expected call of Login.
func (mr *MockIAuthUsecaseMockRecorder) Login(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Login", reflect.TypeOf((*MockIAuthUsecase)(nil).Login), arg0, arg1)
}

// Logout mocks base method.
func (m *MockIAuthUsecase) Logout(arg0 context.Context, arg1 entities.LogoutReq) (*entities.LogoutRes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Logout", arg0, arg1)
	ret0, _ := ret[0].(*entities.LogoutRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Logout indicates an expected call of Logout.
func (mr *MockIAuthUsecaseMockRecorder) Logout(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Logout", reflect.TypeOf((*MockIAuthUsecase)(nil).Logout), arg0, arg1)
}

// Register mocks base method.
func (m *MockIAuthUsecase) Register(arg0 context.Context, arg1 entities.RegisterReq) (*entities.RegisterRes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", arg0, arg1)
	ret0, _ := ret[0].(*entities.RegisterRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Register indicates an expected call of Register.
func (mr *MockIAuthUsecaseMockRecorder) Register(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockIAuthUsecase)(nil).Register), arg0, arg1)
}

// UpdateAccessToken mocks base method.
func (m *MockIAuthUsecase) UpdateAccessToken(arg0 context.Context, arg1 entities.UpdateAccessTokenReq) (*entities.UpdateAccessTokenRes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateAccessToken", arg0, arg1)
	ret0, _ := ret[0].(*entities.UpdateAccessTokenRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAccessToken indicates an expected call of UpdateAccessToken.
func (mr *MockIAuthUsecaseMockRecorder) UpdateAccessToken(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAccessToken", reflect.TypeOf((*MockIAuthUsecase)(nil).UpdateAccessToken), arg0, arg1)
}

// MockIAuthRepository is a mock of IAuthRepository interface.
type MockIAuthRepository struct {
	ctrl     *gomock.Controller
	recorder *MockIAuthRepositoryMockRecorder
}

// MockIAuthRepositoryMockRecorder is the mock recorder for MockIAuthRepository.
type MockIAuthRepositoryMockRecorder struct {
	mock *MockIAuthRepository
}

// NewMockIAuthRepository creates a new mock instance.
func NewMockIAuthRepository(ctrl *gomock.Controller) *MockIAuthRepository {
	mock := &MockIAuthRepository{ctrl: ctrl}
	mock.recorder = &MockIAuthRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIAuthRepository) EXPECT() *MockIAuthRepositoryMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockIAuthRepository) CreateUser(arg0 context.Context, arg1 entities.CreateUserReq) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockIAuthRepositoryMockRecorder) CreateUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockIAuthRepository)(nil).CreateUser), arg0, arg1)
}

// GetUserByEmail mocks base method.
func (m *MockIAuthRepository) GetUserByEmail(arg0 context.Context, arg1 entities.GetUserByEmailReq) (*entities.GetUserByEmailRes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByEmail", arg0, arg1)
	ret0, _ := ret[0].(*entities.GetUserByEmailRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByEmail indicates an expected call of GetUserByEmail.
func (mr *MockIAuthRepositoryMockRecorder) GetUserByEmail(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByEmail", reflect.TypeOf((*MockIAuthRepository)(nil).GetUserByEmail), arg0, arg1)
}

// GetUserRefreshTokens mocks base method.
func (m *MockIAuthRepository) GetUserRefreshTokens(arg0 context.Context, arg1 entities.GetUserRefreshTokensReq) (*entities.GetUserRefreshTokensRes, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserRefreshTokens", arg0, arg1)
	ret0, _ := ret[0].(*entities.GetUserRefreshTokensRes)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserRefreshTokens indicates an expected call of GetUserRefreshTokens.
func (mr *MockIAuthRepositoryMockRecorder) GetUserRefreshTokens(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserRefreshTokens", reflect.TypeOf((*MockIAuthRepository)(nil).GetUserRefreshTokens), arg0, arg1)
}

// UpdateUserRefreshTokens mocks base method.
func (m *MockIAuthRepository) UpdateUserRefreshTokens(arg0 context.Context, arg1 entities.UpdateUserRefreshTokensReq) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserRefreshTokens", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUserRefreshTokens indicates an expected call of UpdateUserRefreshTokens.
func (mr *MockIAuthRepositoryMockRecorder) UpdateUserRefreshTokens(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserRefreshTokens", reflect.TypeOf((*MockIAuthRepository)(nil).UpdateUserRefreshTokens), arg0, arg1)
}
