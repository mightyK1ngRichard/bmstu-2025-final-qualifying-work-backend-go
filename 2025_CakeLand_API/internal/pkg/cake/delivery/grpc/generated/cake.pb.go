// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v5.29.3
// source: cake.proto

package generated

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CategoryGender int32

const (
	CategoryGender_CATEGORY_GENDER_UNSPECIFIED CategoryGender = 0
	CategoryGender_MALE                        CategoryGender = 1
	CategoryGender_FEMALE                      CategoryGender = 2
	CategoryGender_CHILD                       CategoryGender = 3
)

// Enum value maps for CategoryGender.
var (
	CategoryGender_name = map[int32]string{
		0: "CATEGORY_GENDER_UNSPECIFIED",
		1: "MALE",
		2: "FEMALE",
		3: "CHILD",
	}
	CategoryGender_value = map[string]int32{
		"CATEGORY_GENDER_UNSPECIFIED": 0,
		"MALE":                        1,
		"FEMALE":                      2,
		"CHILD":                       3,
	}
)

func (x CategoryGender) Enum() *CategoryGender {
	p := new(CategoryGender)
	*p = x
	return p
}

func (x CategoryGender) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CategoryGender) Descriptor() protoreflect.EnumDescriptor {
	return file_cake_proto_enumTypes[0].Descriptor()
}

func (CategoryGender) Type() protoreflect.EnumType {
	return &file_cake_proto_enumTypes[0]
}

func (x CategoryGender) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CategoryGender.Descriptor instead.
func (CategoryGender) EnumDescriptor() ([]byte, []int) {
	return file_cake_proto_rawDescGZIP(), []int{0}
}

// ############### Cake ###############
type CakeRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CakeId        string                 `protobuf:"bytes,1,opt,name=cake_id,json=cakeId,proto3" json:"cake_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CakeRequest) Reset() {
	*x = CakeRequest{}
	mi := &file_cake_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CakeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CakeRequest) ProtoMessage() {}

func (x *CakeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cake_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CakeRequest.ProtoReflect.Descriptor instead.
func (*CakeRequest) Descriptor() ([]byte, []int) {
	return file_cake_proto_rawDescGZIP(), []int{0}
}

func (x *CakeRequest) GetCakeId() string {
	if x != nil {
		return x.CakeId
	}
	return ""
}

type CakeResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Cake          *Cake                  `protobuf:"bytes,1,opt,name=cake,proto3" json:"cake,omitempty"` // Информация о торте
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CakeResponse) Reset() {
	*x = CakeResponse{}
	mi := &file_cake_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CakeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CakeResponse) ProtoMessage() {}

func (x *CakeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cake_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CakeResponse.ProtoReflect.Descriptor instead.
func (*CakeResponse) Descriptor() ([]byte, []int) {
	return file_cake_proto_rawDescGZIP(), []int{1}
}

func (x *CakeResponse) GetCake() *Cake {
	if x != nil {
		return x.Cake
	}
	return nil
}

// ############### CreateCake ###############
type CreateCakeRequest struct {
	state            protoimpl.MessageState  `protogen:"open.v1"`
	Name             string                  `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`                                                       // Название торта
	PreviewImageData []byte                  `protobuf:"bytes,2,opt,name=preview_image_data,json=previewImageData,proto3" json:"preview_image_data,omitempty"`     // Данные preview изображения торта
	KgPrice          float64                 `protobuf:"fixed64,3,opt,name=kg_price,json=kgPrice,proto3" json:"kg_price,omitempty"`                                // Цена за кг
	Description      string                  `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`                                         // Описание торта
	Mass             float64                 `protobuf:"fixed64,5,opt,name=mass,proto3" json:"mass,omitempty"`                                                     // Масса торта
	IsOpenForSale    bool                    `protobuf:"varint,6,opt,name=is_open_for_sale,json=isOpenForSale,proto3" json:"is_open_for_sale,omitempty"`           // Доступен ли для продажи
	FillingIds       []string                `protobuf:"bytes,7,rep,name=filling_ids,json=fillingIds,proto3" json:"filling_ids,omitempty"`                         // Список ID начинок
	CategoryIds      []string                `protobuf:"bytes,8,rep,name=category_ids,json=categoryIds,proto3" json:"category_ids,omitempty"`                      // Список ID категорий
	Images           [][]byte                `protobuf:"bytes,9,rep,name=images,proto3" json:"images,omitempty"`                                                   // Все фотографии торта
	DiscountKgPrice  *wrapperspb.DoubleValue `protobuf:"bytes,10,opt,name=discount_kg_price,json=discountKgPrice,proto3,oneof" json:"discount_kg_price,omitempty"` // Скидочная цена за кг (nullable)
	DiscountEndTime  *timestamppb.Timestamp  `protobuf:"bytes,11,opt,name=discount_end_time,json=discountEndTime,proto3,oneof" json:"discount_end_time,omitempty"` // Время окончания скидки (nullable)
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *CreateCakeRequest) Reset() {
	*x = CreateCakeRequest{}
	mi := &file_cake_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateCakeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCakeRequest) ProtoMessage() {}

func (x *CreateCakeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cake_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCakeRequest.ProtoReflect.Descriptor instead.
func (*CreateCakeRequest) Descriptor() ([]byte, []int) {
	return file_cake_proto_rawDescGZIP(), []int{2}
}

func (x *CreateCakeRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateCakeRequest) GetPreviewImageData() []byte {
	if x != nil {
		return x.PreviewImageData
	}
	return nil
}

func (x *CreateCakeRequest) GetKgPrice() float64 {
	if x != nil {
		return x.KgPrice
	}
	return 0
}

func (x *CreateCakeRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CreateCakeRequest) GetMass() float64 {
	if x != nil {
		return x.Mass
	}
	return 0
}

func (x *CreateCakeRequest) GetIsOpenForSale() bool {
	if x != nil {
		return x.IsOpenForSale
	}
	return false
}

func (x *CreateCakeRequest) GetFillingIds() []string {
	if x != nil {
		return x.FillingIds
	}
	return nil
}

func (x *CreateCakeRequest) GetCategoryIds() []string {
	if x != nil {
		return x.CategoryIds
	}
	return nil
}

func (x *CreateCakeRequest) GetImages() [][]byte {
	if x != nil {
		return x.Images
	}
	return nil
}

func (x *CreateCakeRequest) GetDiscountKgPrice() *wrapperspb.DoubleValue {
	if x != nil {
		return x.DiscountKgPrice
	}
	return nil
}

func (x *CreateCakeRequest) GetDiscountEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.DiscountEndTime
	}
	return nil
}

type CreateCakeResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CakeId        string                 `protobuf:"bytes,1,opt,name=cake_id,json=cakeId,proto3" json:"cake_id,omitempty"` // ID созданного торта
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateCakeResponse) Reset() {
	*x = CreateCakeResponse{}
	mi := &file_cake_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateCakeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCakeResponse) ProtoMessage() {}

func (x *CreateCakeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cake_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCakeResponse.ProtoReflect.Descriptor instead.
func (*CreateCakeResponse) Descriptor() ([]byte, []int) {
	return file_cake_proto_rawDescGZIP(), []int{3}
}

func (x *CreateCakeResponse) GetCakeId() string {
	if x != nil {
		return x.CakeId
	}
	return ""
}

// ############### CreateFilling ###############
type CreateFillingRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`                            // Название начинки
	ImageData     []byte                 `protobuf:"bytes,2,opt,name=image_data,json=imageData,proto3" json:"image_data,omitempty"` // Данные изображения начинки
	Content       string                 `protobuf:"bytes,3,opt,name=content,proto3" json:"content,omitempty"`                      // Состав начинки
	KgPrice       float64                `protobuf:"fixed64,4,opt,name=kg_price,json=kgPrice,proto3" json:"kg_price,omitempty"`     // Цена за кг
	Description   string                 `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`              // Описание начинки
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateFillingRequest) Reset() {
	*x = CreateFillingRequest{}
	mi := &file_cake_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateFillingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateFillingRequest) ProtoMessage() {}

func (x *CreateFillingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cake_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateFillingRequest.ProtoReflect.Descriptor instead.
func (*CreateFillingRequest) Descriptor() ([]byte, []int) {
	return file_cake_proto_rawDescGZIP(), []int{4}
}

func (x *CreateFillingRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateFillingRequest) GetImageData() []byte {
	if x != nil {
		return x.ImageData
	}
	return nil
}

func (x *CreateFillingRequest) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *CreateFillingRequest) GetKgPrice() float64 {
	if x != nil {
		return x.KgPrice
	}
	return 0
}

func (x *CreateFillingRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type CreateFillingResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Filling       *Filling               `protobuf:"bytes,1,opt,name=filling,proto3" json:"filling,omitempty"` // Созданная начинка
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateFillingResponse) Reset() {
	*x = CreateFillingResponse{}
	mi := &file_cake_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateFillingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateFillingResponse) ProtoMessage() {}

func (x *CreateFillingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cake_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateFillingResponse.ProtoReflect.Descriptor instead.
func (*CreateFillingResponse) Descriptor() ([]byte, []int) {
	return file_cake_proto_rawDescGZIP(), []int{5}
}

func (x *CreateFillingResponse) GetFilling() *Filling {
	if x != nil {
		return x.Filling
	}
	return nil
}

// ############### CreateCategory ###############
type CreateCategoryRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	ImageData     []byte                 `protobuf:"bytes,2,opt,name=image_data,json=imageData,proto3" json:"image_data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateCategoryRequest) Reset() {
	*x = CreateCategoryRequest{}
	mi := &file_cake_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateCategoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCategoryRequest) ProtoMessage() {}

func (x *CreateCategoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cake_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCategoryRequest.ProtoReflect.Descriptor instead.
func (*CreateCategoryRequest) Descriptor() ([]byte, []int) {
	return file_cake_proto_rawDescGZIP(), []int{6}
}

func (x *CreateCategoryRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateCategoryRequest) GetImageData() []byte {
	if x != nil {
		return x.ImageData
	}
	return nil
}

type CreateCategoryResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Category      *Category              `protobuf:"bytes,1,opt,name=category,proto3" json:"category,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateCategoryResponse) Reset() {
	*x = CreateCategoryResponse{}
	mi := &file_cake_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateCategoryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCategoryResponse) ProtoMessage() {}

func (x *CreateCategoryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cake_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCategoryResponse.ProtoReflect.Descriptor instead.
func (*CreateCategoryResponse) Descriptor() ([]byte, []int) {
	return file_cake_proto_rawDescGZIP(), []int{7}
}

func (x *CreateCategoryResponse) GetCategory() *Category {
	if x != nil {
		return x.Category
	}
	return nil
}

// ############### Categories ###############
type CategoriesResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Categories    []*Category            `protobuf:"bytes,1,rep,name=categories,proto3" json:"categories,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CategoriesResponse) Reset() {
	*x = CategoriesResponse{}
	mi := &file_cake_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CategoriesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CategoriesResponse) ProtoMessage() {}

func (x *CategoriesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cake_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CategoriesResponse.ProtoReflect.Descriptor instead.
func (*CategoriesResponse) Descriptor() ([]byte, []int) {
	return file_cake_proto_rawDescGZIP(), []int{8}
}

func (x *CategoriesResponse) GetCategories() []*Category {
	if x != nil {
		return x.Categories
	}
	return nil
}

// ############### Fillings ###############
type FillingsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Fillings      []*Filling             `protobuf:"bytes,1,rep,name=fillings,proto3" json:"fillings,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FillingsResponse) Reset() {
	*x = FillingsResponse{}
	mi := &file_cake_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FillingsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FillingsResponse) ProtoMessage() {}

func (x *FillingsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cake_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FillingsResponse.ProtoReflect.Descriptor instead.
func (*FillingsResponse) Descriptor() ([]byte, []int) {
	return file_cake_proto_rawDescGZIP(), []int{9}
}

func (x *FillingsResponse) GetFillings() []*Filling {
	if x != nil {
		return x.Fillings
	}
	return nil
}

// ############### CakesResponse ###############
type CakesResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Cakes         []*PreviewCake         `protobuf:"bytes,1,rep,name=cakes,proto3" json:"cakes,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CakesResponse) Reset() {
	*x = CakesResponse{}
	mi := &file_cake_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CakesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CakesResponse) ProtoMessage() {}

func (x *CakesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cake_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CakesResponse.ProtoReflect.Descriptor instead.
func (*CakesResponse) Descriptor() ([]byte, []int) {
	return file_cake_proto_rawDescGZIP(), []int{10}
}

func (x *CakesResponse) GetCakes() []*PreviewCake {
	if x != nil {
		return x.Cakes
	}
	return nil
}

// ############### GetCategoriesByGenderName ###############
type GetCategoriesByGenderNameReq struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	CategoryGender CategoryGender         `protobuf:"varint,1,opt,name=categoryGender,proto3,enum=cake.CategoryGender" json:"categoryGender,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *GetCategoriesByGenderNameReq) Reset() {
	*x = GetCategoriesByGenderNameReq{}
	mi := &file_cake_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCategoriesByGenderNameReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCategoriesByGenderNameReq) ProtoMessage() {}

func (x *GetCategoriesByGenderNameReq) ProtoReflect() protoreflect.Message {
	mi := &file_cake_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCategoriesByGenderNameReq.ProtoReflect.Descriptor instead.
func (*GetCategoriesByGenderNameReq) Descriptor() ([]byte, []int) {
	return file_cake_proto_rawDescGZIP(), []int{11}
}

func (x *GetCategoriesByGenderNameReq) GetCategoryGender() CategoryGender {
	if x != nil {
		return x.CategoryGender
	}
	return CategoryGender_CATEGORY_GENDER_UNSPECIFIED
}

type GetCategoriesByGenderNameRes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Categories    []*Category            `protobuf:"bytes,1,rep,name=categories,proto3" json:"categories,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetCategoriesByGenderNameRes) Reset() {
	*x = GetCategoriesByGenderNameRes{}
	mi := &file_cake_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetCategoriesByGenderNameRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCategoriesByGenderNameRes) ProtoMessage() {}

func (x *GetCategoriesByGenderNameRes) ProtoReflect() protoreflect.Message {
	mi := &file_cake_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCategoriesByGenderNameRes.ProtoReflect.Descriptor instead.
func (*GetCategoriesByGenderNameRes) Descriptor() ([]byte, []int) {
	return file_cake_proto_rawDescGZIP(), []int{12}
}

func (x *GetCategoriesByGenderNameRes) GetCategories() []*Category {
	if x != nil {
		return x.Categories
	}
	return nil
}

// ############### CategoryPreviewCakes ###############
type CategoryPreviewCakesReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CategoryID    string                 `protobuf:"bytes,1,opt,name=categoryID,proto3" json:"categoryID,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CategoryPreviewCakesReq) Reset() {
	*x = CategoryPreviewCakesReq{}
	mi := &file_cake_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CategoryPreviewCakesReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CategoryPreviewCakesReq) ProtoMessage() {}

func (x *CategoryPreviewCakesReq) ProtoReflect() protoreflect.Message {
	mi := &file_cake_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CategoryPreviewCakesReq.ProtoReflect.Descriptor instead.
func (*CategoryPreviewCakesReq) Descriptor() ([]byte, []int) {
	return file_cake_proto_rawDescGZIP(), []int{13}
}

func (x *CategoryPreviewCakesReq) GetCategoryID() string {
	if x != nil {
		return x.CategoryID
	}
	return ""
}

type CategoryPreviewCakesRes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	PreviewCakes  []*PreviewCake         `protobuf:"bytes,1,rep,name=previewCakes,proto3" json:"previewCakes,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CategoryPreviewCakesRes) Reset() {
	*x = CategoryPreviewCakesRes{}
	mi := &file_cake_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CategoryPreviewCakesRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CategoryPreviewCakesRes) ProtoMessage() {}

func (x *CategoryPreviewCakesRes) ProtoReflect() protoreflect.Message {
	mi := &file_cake_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CategoryPreviewCakesRes.ProtoReflect.Descriptor instead.
func (*CategoryPreviewCakesRes) Descriptor() ([]byte, []int) {
	return file_cake_proto_rawDescGZIP(), []int{14}
}

func (x *CategoryPreviewCakesRes) GetPreviewCakes() []*PreviewCake {
	if x != nil {
		return x.PreviewCakes
	}
	return nil
}

type AddCakeColorsReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CakeID        string                 `protobuf:"bytes,1,opt,name=cakeID,proto3" json:"cakeID,omitempty"`
	ColorsHex     []string               `protobuf:"bytes,2,rep,name=colorsHex,proto3" json:"colorsHex,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddCakeColorsReq) Reset() {
	*x = AddCakeColorsReq{}
	mi := &file_cake_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddCakeColorsReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddCakeColorsReq) ProtoMessage() {}

func (x *AddCakeColorsReq) ProtoReflect() protoreflect.Message {
	mi := &file_cake_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddCakeColorsReq.ProtoReflect.Descriptor instead.
func (*AddCakeColorsReq) Descriptor() ([]byte, []int) {
	return file_cake_proto_rawDescGZIP(), []int{15}
}

func (x *AddCakeColorsReq) GetCakeID() string {
	if x != nil {
		return x.CakeID
	}
	return ""
}

func (x *AddCakeColorsReq) GetColorsHex() []string {
	if x != nil {
		return x.ColorsHex
	}
	return nil
}

type CakeColorsRes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ColorsHex     []string               `protobuf:"bytes,1,rep,name=colorsHex,proto3" json:"colorsHex,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CakeColorsRes) Reset() {
	*x = CakeColorsRes{}
	mi := &file_cake_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CakeColorsRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CakeColorsRes) ProtoMessage() {}

func (x *CakeColorsRes) ProtoReflect() protoreflect.Message {
	mi := &file_cake_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CakeColorsRes.ProtoReflect.Descriptor instead.
func (*CakeColorsRes) Descriptor() ([]byte, []int) {
	return file_cake_proto_rawDescGZIP(), []int{16}
}

func (x *CakeColorsRes) GetColorsHex() []string {
	if x != nil {
		return x.ColorsHex
	}
	return nil
}

// ############### Add3DModel ###############
type Add3DModelReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ModelFileData []byte                 `protobuf:"bytes,1,opt,name=modelFileData,proto3" json:"modelFileData,omitempty"`
	CakeID        string                 `protobuf:"bytes,2,opt,name=cakeID,proto3" json:"cakeID,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Add3DModelReq) Reset() {
	*x = Add3DModelReq{}
	mi := &file_cake_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Add3DModelReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Add3DModelReq) ProtoMessage() {}

func (x *Add3DModelReq) ProtoReflect() protoreflect.Message {
	mi := &file_cake_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Add3DModelReq.ProtoReflect.Descriptor instead.
func (*Add3DModelReq) Descriptor() ([]byte, []int) {
	return file_cake_proto_rawDescGZIP(), []int{17}
}

func (x *Add3DModelReq) GetModelFileData() []byte {
	if x != nil {
		return x.ModelFileData
	}
	return nil
}

func (x *Add3DModelReq) GetCakeID() string {
	if x != nil {
		return x.CakeID
	}
	return ""
}

type Add3DModelRes struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Model3DURL    string                 `protobuf:"bytes,1,opt,name=model3DURL,proto3" json:"model3DURL,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Add3DModelRes) Reset() {
	*x = Add3DModelRes{}
	mi := &file_cake_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Add3DModelRes) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Add3DModelRes) ProtoMessage() {}

func (x *Add3DModelRes) ProtoReflect() protoreflect.Message {
	mi := &file_cake_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Add3DModelRes.ProtoReflect.Descriptor instead.
func (*Add3DModelRes) Descriptor() ([]byte, []int) {
	return file_cake_proto_rawDescGZIP(), []int{18}
}

func (x *Add3DModelRes) GetModel3DURL() string {
	if x != nil {
		return x.Model3DURL
	}
	return ""
}

// ############### Add3DModel ###############
type SetCakeVisibilityReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CakeID        string                 `protobuf:"bytes,1,opt,name=cakeID,proto3" json:"cakeID,omitempty"`
	IsOpenForSale bool                   `protobuf:"varint,2,opt,name=isOpenForSale,proto3" json:"isOpenForSale,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetCakeVisibilityReq) Reset() {
	*x = SetCakeVisibilityReq{}
	mi := &file_cake_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetCakeVisibilityReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetCakeVisibilityReq) ProtoMessage() {}

func (x *SetCakeVisibilityReq) ProtoReflect() protoreflect.Message {
	mi := &file_cake_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetCakeVisibilityReq.ProtoReflect.Descriptor instead.
func (*SetCakeVisibilityReq) Descriptor() ([]byte, []int) {
	return file_cake_proto_rawDescGZIP(), []int{19}
}

func (x *SetCakeVisibilityReq) GetCakeID() string {
	if x != nil {
		return x.CakeID
	}
	return ""
}

func (x *SetCakeVisibilityReq) GetIsOpenForSale() bool {
	if x != nil {
		return x.IsOpenForSale
	}
	return false
}

// Информация о торте
type Cake struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Id              string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`                                                             // ID торта
	Name            string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                                                         // Название торта
	ImageUrl        string                 `protobuf:"bytes,3,opt,name=image_url,json=imageUrl,proto3" json:"image_url,omitempty"`                                 // URL изображения торта
	KgPrice         float64                `protobuf:"fixed64,4,opt,name=kg_price,json=kgPrice,proto3" json:"kg_price,omitempty"`                                  // Цена за кг
	Rating          int32                  `protobuf:"varint,5,opt,name=rating,proto3" json:"rating,omitempty"`                                                    // Рейтинг (0-5)
	Description     string                 `protobuf:"bytes,6,opt,name=description,proto3" json:"description,omitempty"`                                           // Описание торта
	Mass            float64                `protobuf:"fixed64,7,opt,name=mass,proto3" json:"mass,omitempty"`                                                       // Масса торта
	IsOpenForSale   bool                   `protobuf:"varint,8,opt,name=is_open_for_sale,json=isOpenForSale,proto3" json:"is_open_for_sale,omitempty"`             // Доступен ли для продажи
	Owner           *User                  `protobuf:"bytes,9,opt,name=owner,proto3" json:"owner,omitempty"`                                                       // Информация о владельце
	Fillings        []*Filling             `protobuf:"bytes,10,rep,name=fillings,proto3" json:"fillings,omitempty"`                                                // Список начинок
	Categories      []*Category            `protobuf:"bytes,11,rep,name=categories,proto3" json:"categories,omitempty"`                                            // Список категорий
	DiscountKgPrice *float64               `protobuf:"fixed64,12,opt,name=discount_kg_price,json=discountKgPrice,proto3,oneof" json:"discount_kg_price,omitempty"` // Скидочная цена за кг
	DiscountEndTime *timestamppb.Timestamp `protobuf:"bytes,13,opt,name=discount_end_time,json=discountEndTime,proto3,oneof" json:"discount_end_time,omitempty"`   // Время окончания акции (ISO 8601)
	DateCreation    *timestamppb.Timestamp `protobuf:"bytes,14,opt,name=date_creation,json=dateCreation,proto3" json:"date_creation,omitempty"`                    // Дата создания торта (ISO 8601)
	Images          []*Cake_CakeImage      `protobuf:"bytes,15,rep,name=images,proto3" json:"images,omitempty"`                                                    // Фотографии торта
	ReviewsCount    int32                  `protobuf:"varint,16,opt,name=reviewsCount,proto3" json:"reviewsCount,omitempty"`                                       // Число отзывов
	Model3DURL      *string                `protobuf:"bytes,17,opt,name=model3DURL,proto3,oneof" json:"model3DURL,omitempty"`                                      // 3D model url
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *Cake) Reset() {
	*x = Cake{}
	mi := &file_cake_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Cake) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Cake) ProtoMessage() {}

func (x *Cake) ProtoReflect() protoreflect.Message {
	mi := &file_cake_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Cake.ProtoReflect.Descriptor instead.
func (*Cake) Descriptor() ([]byte, []int) {
	return file_cake_proto_rawDescGZIP(), []int{20}
}

func (x *Cake) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Cake) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Cake) GetImageUrl() string {
	if x != nil {
		return x.ImageUrl
	}
	return ""
}

func (x *Cake) GetKgPrice() float64 {
	if x != nil {
		return x.KgPrice
	}
	return 0
}

func (x *Cake) GetRating() int32 {
	if x != nil {
		return x.Rating
	}
	return 0
}

func (x *Cake) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Cake) GetMass() float64 {
	if x != nil {
		return x.Mass
	}
	return 0
}

func (x *Cake) GetIsOpenForSale() bool {
	if x != nil {
		return x.IsOpenForSale
	}
	return false
}

func (x *Cake) GetOwner() *User {
	if x != nil {
		return x.Owner
	}
	return nil
}

func (x *Cake) GetFillings() []*Filling {
	if x != nil {
		return x.Fillings
	}
	return nil
}

func (x *Cake) GetCategories() []*Category {
	if x != nil {
		return x.Categories
	}
	return nil
}

func (x *Cake) GetDiscountKgPrice() float64 {
	if x != nil && x.DiscountKgPrice != nil {
		return *x.DiscountKgPrice
	}
	return 0
}

func (x *Cake) GetDiscountEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.DiscountEndTime
	}
	return nil
}

func (x *Cake) GetDateCreation() *timestamppb.Timestamp {
	if x != nil {
		return x.DateCreation
	}
	return nil
}

func (x *Cake) GetImages() []*Cake_CakeImage {
	if x != nil {
		return x.Images
	}
	return nil
}

func (x *Cake) GetReviewsCount() int32 {
	if x != nil {
		return x.ReviewsCount
	}
	return 0
}

func (x *Cake) GetModel3DURL() string {
	if x != nil && x.Model3DURL != nil {
		return *x.Model3DURL
	}
	return ""
}

// Информация о владельце
type User struct {
	state          protoimpl.MessageState  `protogen:"open.v1"`
	Id             string                  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`                         // ID пользователя
	Fio            *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=fio,proto3" json:"fio,omitempty"`                       // Полное имя
	Nickname       string                  `protobuf:"bytes,3,opt,name=nickname,proto3" json:"nickname,omitempty"`             // Никнейм
	Mail           string                  `protobuf:"bytes,4,opt,name=mail,proto3" json:"mail,omitempty"`                     // Электронная почта
	Phone          *wrapperspb.StringValue `protobuf:"bytes,6,opt,name=phone,proto3" json:"phone,omitempty"`                   // Телефон
	ImageURL       *wrapperspb.StringValue `protobuf:"bytes,7,opt,name=imageURL,proto3" json:"imageURL,omitempty"`             // Аватарка
	HeaderImageURL *wrapperspb.StringValue `protobuf:"bytes,8,opt,name=headerImageURL,proto3" json:"headerImageURL,omitempty"` // Шапка профиля
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *User) Reset() {
	*x = User{}
	mi := &file_cake_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *User) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*User) ProtoMessage() {}

func (x *User) ProtoReflect() protoreflect.Message {
	mi := &file_cake_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use User.ProtoReflect.Descriptor instead.
func (*User) Descriptor() ([]byte, []int) {
	return file_cake_proto_rawDescGZIP(), []int{21}
}

func (x *User) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *User) GetFio() *wrapperspb.StringValue {
	if x != nil {
		return x.Fio
	}
	return nil
}

func (x *User) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *User) GetMail() string {
	if x != nil {
		return x.Mail
	}
	return ""
}

func (x *User) GetPhone() *wrapperspb.StringValue {
	if x != nil {
		return x.Phone
	}
	return nil
}

func (x *User) GetImageURL() *wrapperspb.StringValue {
	if x != nil {
		return x.ImageURL
	}
	return nil
}

func (x *User) GetHeaderImageURL() *wrapperspb.StringValue {
	if x != nil {
		return x.HeaderImageURL
	}
	return nil
}

// Информация о начинке
type Filling struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`                             // ID начинки
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                         // Название начинки
	ImageUrl      string                 `protobuf:"bytes,3,opt,name=image_url,json=imageUrl,proto3" json:"image_url,omitempty"` // URL изображения начинки
	Content       string                 `protobuf:"bytes,4,opt,name=content,proto3" json:"content,omitempty"`                   // Состав начинки
	KgPrice       float64                `protobuf:"fixed64,5,opt,name=kg_price,json=kgPrice,proto3" json:"kg_price,omitempty"`  // Цена за кг
	Description   string                 `protobuf:"bytes,6,opt,name=description,proto3" json:"description,omitempty"`           // Описание начинки
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Filling) Reset() {
	*x = Filling{}
	mi := &file_cake_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Filling) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Filling) ProtoMessage() {}

func (x *Filling) ProtoReflect() protoreflect.Message {
	mi := &file_cake_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Filling.ProtoReflect.Descriptor instead.
func (*Filling) Descriptor() ([]byte, []int) {
	return file_cake_proto_rawDescGZIP(), []int{22}
}

func (x *Filling) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Filling) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Filling) GetImageUrl() string {
	if x != nil {
		return x.ImageUrl
	}
	return ""
}

func (x *Filling) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *Filling) GetKgPrice() float64 {
	if x != nil {
		return x.KgPrice
	}
	return 0
}

func (x *Filling) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

// Информация о категории
type Category struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`                                                                    // ID категории
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                                                                // Название категории
	ImageUrl      string                 `protobuf:"bytes,3,opt,name=image_url,json=imageUrl,proto3" json:"image_url,omitempty"`                                        // URL изображения категории
	GenderTags    []CategoryGender       `protobuf:"varint,4,rep,packed,name=gender_tags,json=genderTags,proto3,enum=cake.CategoryGender" json:"gender_tags,omitempty"` // Теги категории (по полу)
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Category) Reset() {
	*x = Category{}
	mi := &file_cake_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Category) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Category) ProtoMessage() {}

func (x *Category) ProtoReflect() protoreflect.Message {
	mi := &file_cake_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Category.ProtoReflect.Descriptor instead.
func (*Category) Descriptor() ([]byte, []int) {
	return file_cake_proto_rawDescGZIP(), []int{23}
}

func (x *Category) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Category) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Category) GetImageUrl() string {
	if x != nil {
		return x.ImageUrl
	}
	return ""
}

func (x *Category) GetGenderTags() []CategoryGender {
	if x != nil {
		return x.GenderTags
	}
	return nil
}

type PreviewCake struct {
	state           protoimpl.MessageState  `protogen:"open.v1"`
	Id              string                  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`                                                    // UUID
	Name            string                  `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                                                // Название
	PreviewImageUrl string                  `protobuf:"bytes,3,opt,name=preview_image_url,json=previewImageUrl,proto3" json:"preview_image_url,omitempty"` // URL изображения
	KgPrice         float64                 `protobuf:"fixed64,4,opt,name=kg_price,json=kgPrice,proto3" json:"kg_price,omitempty"`                         // Цена за килограмм
	Rating          uint32                  `protobuf:"varint,5,opt,name=rating,proto3" json:"rating,omitempty"`                                           // Рейтинг
	Description     *wrapperspb.StringValue `protobuf:"bytes,6,opt,name=description,proto3" json:"description,omitempty"`                                  // Описание (nullable)
	Mass            float64                 `protobuf:"fixed64,7,opt,name=mass,proto3" json:"mass,omitempty"`                                              // Масса
	DiscountKgPrice *wrapperspb.DoubleValue `protobuf:"bytes,8,opt,name=discount_kg_price,json=discountKgPrice,proto3" json:"discount_kg_price,omitempty"` // Скидочная цена за кг (nullable)
	DiscountEndTime *timestamppb.Timestamp  `protobuf:"bytes,9,opt,name=discount_end_time,json=discountEndTime,proto3" json:"discount_end_time,omitempty"` // Время окончания скидки (nullable)
	DateCreation    *timestamppb.Timestamp  `protobuf:"bytes,10,opt,name=date_creation,json=dateCreation,proto3" json:"date_creation,omitempty"`           // Время создания
	IsOpenForSale   bool                    `protobuf:"varint,11,opt,name=is_open_for_sale,json=isOpenForSale,proto3" json:"is_open_for_sale,omitempty"`   // Продается ли
	Owner           *User                   `protobuf:"bytes,12,opt,name=owner,proto3" json:"owner,omitempty"`                                             // Владелец
	ReviewsCount    int32                   `protobuf:"varint,13,opt,name=reviewsCount,proto3" json:"reviewsCount,omitempty"`                              // Число отзывов
	ColorsHex       []string                `protobuf:"bytes,14,rep,name=colorsHex,proto3" json:"colorsHex,omitempty"`                                     // Hex цвета торта
	Model3DURL      *string                 `protobuf:"bytes,15,opt,name=model3DURL,proto3,oneof" json:"model3DURL,omitempty"`                             // 3D model url
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *PreviewCake) Reset() {
	*x = PreviewCake{}
	mi := &file_cake_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PreviewCake) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PreviewCake) ProtoMessage() {}

func (x *PreviewCake) ProtoReflect() protoreflect.Message {
	mi := &file_cake_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PreviewCake.ProtoReflect.Descriptor instead.
func (*PreviewCake) Descriptor() ([]byte, []int) {
	return file_cake_proto_rawDescGZIP(), []int{24}
}

func (x *PreviewCake) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PreviewCake) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *PreviewCake) GetPreviewImageUrl() string {
	if x != nil {
		return x.PreviewImageUrl
	}
	return ""
}

func (x *PreviewCake) GetKgPrice() float64 {
	if x != nil {
		return x.KgPrice
	}
	return 0
}

func (x *PreviewCake) GetRating() uint32 {
	if x != nil {
		return x.Rating
	}
	return 0
}

func (x *PreviewCake) GetDescription() *wrapperspb.StringValue {
	if x != nil {
		return x.Description
	}
	return nil
}

func (x *PreviewCake) GetMass() float64 {
	if x != nil {
		return x.Mass
	}
	return 0
}

func (x *PreviewCake) GetDiscountKgPrice() *wrapperspb.DoubleValue {
	if x != nil {
		return x.DiscountKgPrice
	}
	return nil
}

func (x *PreviewCake) GetDiscountEndTime() *timestamppb.Timestamp {
	if x != nil {
		return x.DiscountEndTime
	}
	return nil
}

func (x *PreviewCake) GetDateCreation() *timestamppb.Timestamp {
	if x != nil {
		return x.DateCreation
	}
	return nil
}

func (x *PreviewCake) GetIsOpenForSale() bool {
	if x != nil {
		return x.IsOpenForSale
	}
	return false
}

func (x *PreviewCake) GetOwner() *User {
	if x != nil {
		return x.Owner
	}
	return nil
}

func (x *PreviewCake) GetReviewsCount() int32 {
	if x != nil {
		return x.ReviewsCount
	}
	return 0
}

func (x *PreviewCake) GetColorsHex() []string {
	if x != nil {
		return x.ColorsHex
	}
	return nil
}

func (x *PreviewCake) GetModel3DURL() string {
	if x != nil && x.Model3DURL != nil {
		return *x.Model3DURL
	}
	return ""
}

type Cake_CakeImage struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ImageUrl      string                 `protobuf:"bytes,2,opt,name=image_url,json=imageUrl,proto3" json:"image_url,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Cake_CakeImage) Reset() {
	*x = Cake_CakeImage{}
	mi := &file_cake_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Cake_CakeImage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Cake_CakeImage) ProtoMessage() {}

func (x *Cake_CakeImage) ProtoReflect() protoreflect.Message {
	mi := &file_cake_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Cake_CakeImage.ProtoReflect.Descriptor instead.
func (*Cake_CakeImage) Descriptor() ([]byte, []int) {
	return file_cake_proto_rawDescGZIP(), []int{20, 0}
}

func (x *Cake_CakeImage) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Cake_CakeImage) GetImageUrl() string {
	if x != nil {
		return x.ImageUrl
	}
	return ""
}

var File_cake_proto protoreflect.FileDescriptor

var file_cake_proto_rawDesc = string([]byte{
	0x0a, 0x0a, 0x63, 0x61, 0x6b, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x04, 0x63, 0x61,
	0x6b, 0x65, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0x26, 0x0a, 0x0b, 0x43, 0x61, 0x6b, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x17, 0x0a, 0x07, 0x63, 0x61, 0x6b, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x63, 0x61, 0x6b, 0x65, 0x49, 0x64, 0x22, 0x2e, 0x0a, 0x0c, 0x43, 0x61, 0x6b, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1e, 0x0a, 0x04, 0x63, 0x61, 0x6b, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x63, 0x61, 0x6b, 0x65, 0x2e, 0x43, 0x61,
	0x6b, 0x65, 0x52, 0x04, 0x63, 0x61, 0x6b, 0x65, 0x22, 0xf3, 0x03, 0x0a, 0x11, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x43, 0x61, 0x6b, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x12, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x10,
	0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x19, 0x0a, 0x08, 0x6b, 0x67, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x07, 0x6b, 0x67, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a,
	0x04, 0x6d, 0x61, 0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x6d, 0x61, 0x73,
	0x73, 0x12, 0x27, 0x0a, 0x10, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x66, 0x6f, 0x72,
	0x5f, 0x73, 0x61, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x69, 0x73, 0x4f,
	0x70, 0x65, 0x6e, 0x46, 0x6f, 0x72, 0x53, 0x61, 0x6c, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x69,
	0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x0a, 0x66, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x0b, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x73, 0x12, 0x16,
	0x0a, 0x06, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x06,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x12, 0x4d, 0x0a, 0x11, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x6b, 0x67, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x48,
	0x00, 0x52, 0x0f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4b, 0x67, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x4b, 0x0a, 0x11, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x01, 0x52, 0x0f,
	0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x88,
	0x01, 0x01, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f,
	0x6b, 0x67, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x64, 0x69, 0x73,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x22, 0x2d,
	0x0a, 0x12, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x61, 0x6b, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x61, 0x6b, 0x65, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x61, 0x6b, 0x65, 0x49, 0x64, 0x22, 0xa0, 0x01,
	0x0a, 0x14, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74,
	0x65, 0x6e, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x6b, 0x67, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x6b, 0x67, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0x40, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x6c, 0x69, 0x6e,
	0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x27, 0x0a, 0x07, 0x66, 0x69, 0x6c,
	0x6c, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x63, 0x61, 0x6b,
	0x65, 0x2e, 0x46, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x6c, 0x69,
	0x6e, 0x67, 0x22, 0x4a, 0x0a, 0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x1d, 0x0a, 0x0a, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x09, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x22, 0x44,
	0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x63, 0x61, 0x6b,
	0x65, 0x2e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x22, 0x44, 0x0a, 0x12, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x0a, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e,
	0x2e, 0x63, 0x61, 0x6b, 0x65, 0x2e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x0a,
	0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x22, 0x3d, 0x0a, 0x10, 0x46, 0x69,
	0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x29,
	0x0a, 0x08, 0x66, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0d, 0x2e, 0x63, 0x61, 0x6b, 0x65, 0x2e, 0x46, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x52,
	0x08, 0x66, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x73, 0x22, 0x38, 0x0a, 0x0d, 0x43, 0x61, 0x6b,
	0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x27, 0x0a, 0x05, 0x63, 0x61,
	0x6b, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x63, 0x61, 0x6b, 0x65,
	0x2e, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x43, 0x61, 0x6b, 0x65, 0x52, 0x05, 0x63, 0x61,
	0x6b, 0x65, 0x73, 0x22, 0x5c, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x69, 0x65, 0x73, 0x42, 0x79, 0x47, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x52, 0x65, 0x71, 0x12, 0x3c, 0x0a, 0x0e, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x47,
	0x65, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x63, 0x61,
	0x6b, 0x65, 0x2e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x47, 0x65, 0x6e, 0x64, 0x65,
	0x72, 0x52, 0x0e, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x47, 0x65, 0x6e, 0x64, 0x65,
	0x72, 0x22, 0x4e, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69,
	0x65, 0x73, 0x42, 0x79, 0x47, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x65,
	0x73, 0x12, 0x2e, 0x0a, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x63, 0x61, 0x6b, 0x65, 0x2e, 0x43, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65,
	0x73, 0x22, 0x39, 0x0a, 0x17, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x50, 0x72, 0x65,
	0x76, 0x69, 0x65, 0x77, 0x43, 0x61, 0x6b, 0x65, 0x73, 0x52, 0x65, 0x71, 0x12, 0x1e, 0x0a, 0x0a,
	0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x44, 0x22, 0x50, 0x0a, 0x17,
	0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x43,
	0x61, 0x6b, 0x65, 0x73, 0x52, 0x65, 0x73, 0x12, 0x35, 0x0a, 0x0c, 0x70, 0x72, 0x65, 0x76, 0x69,
	0x65, 0x77, 0x43, 0x61, 0x6b, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x63, 0x61, 0x6b, 0x65, 0x2e, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x43, 0x61, 0x6b, 0x65,
	0x52, 0x0c, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x43, 0x61, 0x6b, 0x65, 0x73, 0x22, 0x48,
	0x0a, 0x10, 0x41, 0x64, 0x64, 0x43, 0x61, 0x6b, 0x65, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x52,
	0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x61, 0x6b, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x63, 0x61, 0x6b, 0x65, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f,
	0x6c, 0x6f, 0x72, 0x73, 0x48, 0x65, 0x78, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x63,
	0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x48, 0x65, 0x78, 0x22, 0x2d, 0x0a, 0x0d, 0x43, 0x61, 0x6b, 0x65,
	0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x52, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6c,
	0x6f, 0x72, 0x73, 0x48, 0x65, 0x78, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f,
	0x6c, 0x6f, 0x72, 0x73, 0x48, 0x65, 0x78, 0x22, 0x4d, 0x0a, 0x0d, 0x41, 0x64, 0x64, 0x33, 0x44,
	0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x12, 0x24, 0x0a, 0x0d, 0x6d, 0x6f, 0x64, 0x65,
	0x6c, 0x46, 0x69, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x0d, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x46, 0x69, 0x6c, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x16,
	0x0a, 0x06, 0x63, 0x61, 0x6b, 0x65, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x63, 0x61, 0x6b, 0x65, 0x49, 0x44, 0x22, 0x2f, 0x0a, 0x0d, 0x41, 0x64, 0x64, 0x33, 0x44, 0x4d,
	0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x33, 0x44, 0x55, 0x52, 0x4c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6d, 0x6f, 0x64,
	0x65, 0x6c, 0x33, 0x44, 0x55, 0x52, 0x4c, 0x22, 0x54, 0x0a, 0x14, 0x53, 0x65, 0x74, 0x43, 0x61,
	0x6b, 0x65, 0x56, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x12,
	0x16, 0x0a, 0x06, 0x63, 0x61, 0x6b, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x63, 0x61, 0x6b, 0x65, 0x49, 0x44, 0x12, 0x24, 0x0a, 0x0d, 0x69, 0x73, 0x4f, 0x70, 0x65,
	0x6e, 0x46, 0x6f, 0x72, 0x53, 0x61, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d,
	0x69, 0x73, 0x4f, 0x70, 0x65, 0x6e, 0x46, 0x6f, 0x72, 0x53, 0x61, 0x6c, 0x65, 0x22, 0x81, 0x06,
	0x0a, 0x04, 0x43, 0x61, 0x6b, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69,
	0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x19, 0x0a, 0x08, 0x6b, 0x67, 0x5f, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x6b, 0x67, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x06, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04,
	0x6d, 0x61, 0x73, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x6d, 0x61, 0x73, 0x73,
	0x12, 0x27, 0x0a, 0x10, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x66, 0x6f, 0x72, 0x5f,
	0x73, 0x61, 0x6c, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x69, 0x73, 0x4f, 0x70,
	0x65, 0x6e, 0x46, 0x6f, 0x72, 0x53, 0x61, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x05, 0x6f, 0x77, 0x6e,
	0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x63, 0x61, 0x6b, 0x65, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x29, 0x0a, 0x08, 0x66,
	0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x63, 0x61, 0x6b, 0x65, 0x2e, 0x46, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x52, 0x08, 0x66, 0x69,
	0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x2e, 0x0a, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x69, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x63, 0x61, 0x6b,
	0x65, 0x2e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x0a, 0x63, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x12, 0x2f, 0x0a, 0x11, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x5f, 0x6b, 0x67, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x01, 0x48, 0x00, 0x52, 0x0f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4b, 0x67, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x88, 0x01, 0x01, 0x12, 0x4b, 0x0a, 0x11, 0x64, 0x69, 0x73, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x01,
	0x52, 0x0f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x3f, 0x0a, 0x0d, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x64, 0x61, 0x74, 0x65, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x06, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x73, 0x18,
	0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x61, 0x6b, 0x65, 0x2e, 0x43, 0x61, 0x6b,
	0x65, 0x2e, 0x43, 0x61, 0x6b, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x52, 0x06, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x73, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x72, 0x65, 0x76, 0x69, 0x65,
	0x77, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0a, 0x6d, 0x6f, 0x64, 0x65, 0x6c,
	0x33, 0x44, 0x55, 0x52, 0x4c, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x48, 0x02, 0x52, 0x0a, 0x6d,
	0x6f, 0x64, 0x65, 0x6c, 0x33, 0x44, 0x55, 0x52, 0x4c, 0x88, 0x01, 0x01, 0x1a, 0x38, 0x0a, 0x09,
	0x43, 0x61, 0x6b, 0x65, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6d,
	0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x6b, 0x67, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x42, 0x14, 0x0a, 0x12,
	0x5f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x33, 0x44, 0x55, 0x52,
	0x4c, 0x22, 0xaa, 0x02, 0x0a, 0x04, 0x55, 0x73, 0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2e, 0x0a, 0x03, 0x66, 0x69,
	0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x03, 0x66, 0x69, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x69,
	0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69,
	0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x61, 0x69, 0x6c, 0x12, 0x32, 0x0a, 0x05, 0x70, 0x68,
	0x6f, 0x6e, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x70, 0x68, 0x6f, 0x6e, 0x65, 0x12, 0x38,
	0x0a, 0x08, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x52, 0x4c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08,
	0x69, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x52, 0x4c, 0x12, 0x44, 0x0a, 0x0e, 0x68, 0x65, 0x61, 0x64,
	0x65, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x52, 0x4c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x52, 0x4c, 0x22, 0xa1,
	0x01, 0x0a, 0x07, 0x46, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1b,
	0x0a, 0x09, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x63,
	0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x6b, 0x67, 0x5f, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x6b, 0x67, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0x82, 0x01, 0x0a, 0x08, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x72, 0x6c,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c,
	0x12, 0x35, 0x0a, 0x0b, 0x67, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x74, 0x61, 0x67, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x14, 0x2e, 0x63, 0x61, 0x6b, 0x65, 0x2e, 0x43, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x47, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x52, 0x0a, 0x67, 0x65, 0x6e,
	0x64, 0x65, 0x72, 0x54, 0x61, 0x67, 0x73, 0x22, 0xf8, 0x04, 0x0a, 0x0b, 0x50, 0x72, 0x65, 0x76,
	0x69, 0x65, 0x77, 0x43, 0x61, 0x6b, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x70,
	0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x5f, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x72, 0x6c,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x70, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x49,
	0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x19, 0x0a, 0x08, 0x6b, 0x67, 0x5f, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x6b, 0x67, 0x50, 0x72, 0x69,
	0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x06, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x3e, 0x0a, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x61,
	0x73, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x6d, 0x61, 0x73, 0x73, 0x12, 0x48,
	0x0a, 0x11, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6b, 0x67, 0x5f, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62,
	0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x4b, 0x67, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x46, 0x0a, 0x11, 0x64, 0x69, 0x73, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x65, 0x6e, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x0f, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x45, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x3f, 0x0a, 0x0d, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x52, 0x0c, 0x64, 0x61, 0x74, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x27, 0x0a, 0x10, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x66, 0x6f, 0x72,
	0x5f, 0x73, 0x61, 0x6c, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x69, 0x73, 0x4f,
	0x70, 0x65, 0x6e, 0x46, 0x6f, 0x72, 0x53, 0x61, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x05, 0x6f, 0x77,
	0x6e, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x63, 0x61, 0x6b, 0x65,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x0c,
	0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0c, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x48, 0x65, 0x78, 0x18, 0x0e, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x48, 0x65, 0x78, 0x12, 0x23,
	0x0a, 0x0a, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x33, 0x44, 0x55, 0x52, 0x4c, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x0a, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x33, 0x44, 0x55, 0x52, 0x4c,
	0x88, 0x01, 0x01, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x33, 0x44, 0x55,
	0x52, 0x4c, 0x2a, 0x52, 0x0a, 0x0e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x47, 0x65,
	0x6e, 0x64, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x1b, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x59,
	0x5f, 0x47, 0x45, 0x4e, 0x44, 0x45, 0x52, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46,
	0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x4d, 0x41, 0x4c, 0x45, 0x10, 0x01, 0x12,
	0x0a, 0x0a, 0x06, 0x46, 0x45, 0x4d, 0x41, 0x4c, 0x45, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x43,
	0x48, 0x49, 0x4c, 0x44, 0x10, 0x03, 0x32, 0xfd, 0x06, 0x0a, 0x0b, 0x43, 0x61, 0x6b, 0x65, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x3f, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x43, 0x61, 0x6b, 0x65, 0x12, 0x17, 0x2e, 0x63, 0x61, 0x6b, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x43, 0x61, 0x6b, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e,
	0x63, 0x61, 0x6b, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x61, 0x6b, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2d, 0x0a, 0x04, 0x43, 0x61, 0x6b, 0x65, 0x12,
	0x11, 0x2e, 0x63, 0x61, 0x6b, 0x65, 0x2e, 0x43, 0x61, 0x6b, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x12, 0x2e, 0x63, 0x61, 0x6b, 0x65, 0x2e, 0x43, 0x61, 0x6b, 0x65, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x05, 0x43, 0x61, 0x6b, 0x65, 0x73, 0x12,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x13, 0x2e, 0x63, 0x61, 0x6b, 0x65, 0x2e, 0x43,
	0x61, 0x6b, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x54, 0x0a, 0x14,
	0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x43,
	0x61, 0x6b, 0x65, 0x73, 0x12, 0x1d, 0x2e, 0x63, 0x61, 0x6b, 0x65, 0x2e, 0x43, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x43, 0x61, 0x6b, 0x65, 0x73,
	0x52, 0x65, 0x71, 0x1a, 0x1d, 0x2e, 0x63, 0x61, 0x6b, 0x65, 0x2e, 0x43, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x50, 0x72, 0x65, 0x76, 0x69, 0x65, 0x77, 0x43, 0x61, 0x6b, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x12, 0x48, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x6c,
	0x69, 0x6e, 0x67, 0x12, 0x1a, 0x2e, 0x63, 0x61, 0x6b, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x46, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1b, 0x2e, 0x63, 0x61, 0x6b, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x69, 0x6c,
	0x6c, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x08,
	0x46, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x1a, 0x16, 0x2e, 0x63, 0x61, 0x6b, 0x65, 0x2e, 0x46, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f, 0x0a, 0x0d, 0x41, 0x64, 0x64, 0x43,
	0x61, 0x6b, 0x65, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x12, 0x16, 0x2e, 0x63, 0x61, 0x6b, 0x65,
	0x2e, 0x41, 0x64, 0x64, 0x43, 0x61, 0x6b, 0x65, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x52, 0x65,
	0x71, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x38, 0x0a, 0x09, 0x47, 0x65, 0x74,
	0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x13,
	0x2e, 0x63, 0x61, 0x6b, 0x65, 0x2e, 0x43, 0x61, 0x6b, 0x65, 0x43, 0x6f, 0x6c, 0x6f, 0x72, 0x73,
	0x52, 0x65, 0x73, 0x12, 0x36, 0x0a, 0x0a, 0x41, 0x64, 0x64, 0x33, 0x44, 0x4d, 0x6f, 0x64, 0x65,
	0x6c, 0x12, 0x13, 0x2e, 0x63, 0x61, 0x6b, 0x65, 0x2e, 0x41, 0x64, 0x64, 0x33, 0x44, 0x4d, 0x6f,
	0x64, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x1a, 0x13, 0x2e, 0x63, 0x61, 0x6b, 0x65, 0x2e, 0x41, 0x64,
	0x64, 0x33, 0x44, 0x4d, 0x6f, 0x64, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x12, 0x47, 0x0a, 0x11, 0x53,
	0x65, 0x74, 0x43, 0x61, 0x6b, 0x65, 0x56, 0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x12, 0x1a, 0x2e, 0x63, 0x61, 0x6b, 0x65, 0x2e, 0x53, 0x65, 0x74, 0x43, 0x61, 0x6b, 0x65, 0x56,
	0x69, 0x73, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x12, 0x4b, 0x0a, 0x0e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x1b, 0x2e, 0x63, 0x61, 0x6b, 0x65, 0x2e, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x63, 0x61, 0x6b, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x3e, 0x0a, 0x0a, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x12,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x18, 0x2e, 0x63, 0x61, 0x6b, 0x65, 0x2e, 0x43,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x63, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69,
	0x65, 0x73, 0x42, 0x79, 0x47, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x22,
	0x2e, 0x63, 0x61, 0x6b, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x69, 0x65, 0x73, 0x42, 0x79, 0x47, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x52,
	0x65, 0x71, 0x1a, 0x22, 0x2e, 0x63, 0x61, 0x6b, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x42, 0x79, 0x47, 0x65, 0x6e, 0x64, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x52, 0x65, 0x73, 0x42, 0x3d, 0x5a, 0x3b, 0x32, 0x30, 0x32, 0x35, 0x5f, 0x43,
	0x61, 0x6b, 0x65, 0x4c, 0x61, 0x6e, 0x64, 0x5f, 0x41, 0x50, 0x49, 0x2f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x61, 0x6c, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x63, 0x61, 0x6b, 0x65, 0x2f, 0x64, 0x65,
	0x6c, 0x69, 0x76, 0x65, 0x72, 0x79, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x2f, 0x67, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x74, 0x65, 0x64, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_cake_proto_rawDescOnce sync.Once
	file_cake_proto_rawDescData []byte
)

func file_cake_proto_rawDescGZIP() []byte {
	file_cake_proto_rawDescOnce.Do(func() {
		file_cake_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_cake_proto_rawDesc), len(file_cake_proto_rawDesc)))
	})
	return file_cake_proto_rawDescData
}

var file_cake_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_cake_proto_msgTypes = make([]protoimpl.MessageInfo, 26)
var file_cake_proto_goTypes = []any{
	(CategoryGender)(0),                  // 0: cake.CategoryGender
	(*CakeRequest)(nil),                  // 1: cake.CakeRequest
	(*CakeResponse)(nil),                 // 2: cake.CakeResponse
	(*CreateCakeRequest)(nil),            // 3: cake.CreateCakeRequest
	(*CreateCakeResponse)(nil),           // 4: cake.CreateCakeResponse
	(*CreateFillingRequest)(nil),         // 5: cake.CreateFillingRequest
	(*CreateFillingResponse)(nil),        // 6: cake.CreateFillingResponse
	(*CreateCategoryRequest)(nil),        // 7: cake.CreateCategoryRequest
	(*CreateCategoryResponse)(nil),       // 8: cake.CreateCategoryResponse
	(*CategoriesResponse)(nil),           // 9: cake.CategoriesResponse
	(*FillingsResponse)(nil),             // 10: cake.FillingsResponse
	(*CakesResponse)(nil),                // 11: cake.CakesResponse
	(*GetCategoriesByGenderNameReq)(nil), // 12: cake.GetCategoriesByGenderNameReq
	(*GetCategoriesByGenderNameRes)(nil), // 13: cake.GetCategoriesByGenderNameRes
	(*CategoryPreviewCakesReq)(nil),      // 14: cake.CategoryPreviewCakesReq
	(*CategoryPreviewCakesRes)(nil),      // 15: cake.CategoryPreviewCakesRes
	(*AddCakeColorsReq)(nil),             // 16: cake.AddCakeColorsReq
	(*CakeColorsRes)(nil),                // 17: cake.CakeColorsRes
	(*Add3DModelReq)(nil),                // 18: cake.Add3DModelReq
	(*Add3DModelRes)(nil),                // 19: cake.Add3DModelRes
	(*SetCakeVisibilityReq)(nil),         // 20: cake.SetCakeVisibilityReq
	(*Cake)(nil),                         // 21: cake.Cake
	(*User)(nil),                         // 22: cake.User
	(*Filling)(nil),                      // 23: cake.Filling
	(*Category)(nil),                     // 24: cake.Category
	(*PreviewCake)(nil),                  // 25: cake.PreviewCake
	(*Cake_CakeImage)(nil),               // 26: cake.Cake.CakeImage
	(*wrapperspb.DoubleValue)(nil),       // 27: google.protobuf.DoubleValue
	(*timestamppb.Timestamp)(nil),        // 28: google.protobuf.Timestamp
	(*wrapperspb.StringValue)(nil),       // 29: google.protobuf.StringValue
	(*emptypb.Empty)(nil),                // 30: google.protobuf.Empty
}
var file_cake_proto_depIdxs = []int32{
	21, // 0: cake.CakeResponse.cake:type_name -> cake.Cake
	27, // 1: cake.CreateCakeRequest.discount_kg_price:type_name -> google.protobuf.DoubleValue
	28, // 2: cake.CreateCakeRequest.discount_end_time:type_name -> google.protobuf.Timestamp
	23, // 3: cake.CreateFillingResponse.filling:type_name -> cake.Filling
	24, // 4: cake.CreateCategoryResponse.category:type_name -> cake.Category
	24, // 5: cake.CategoriesResponse.categories:type_name -> cake.Category
	23, // 6: cake.FillingsResponse.fillings:type_name -> cake.Filling
	25, // 7: cake.CakesResponse.cakes:type_name -> cake.PreviewCake
	0,  // 8: cake.GetCategoriesByGenderNameReq.categoryGender:type_name -> cake.CategoryGender
	24, // 9: cake.GetCategoriesByGenderNameRes.categories:type_name -> cake.Category
	25, // 10: cake.CategoryPreviewCakesRes.previewCakes:type_name -> cake.PreviewCake
	22, // 11: cake.Cake.owner:type_name -> cake.User
	23, // 12: cake.Cake.fillings:type_name -> cake.Filling
	24, // 13: cake.Cake.categories:type_name -> cake.Category
	28, // 14: cake.Cake.discount_end_time:type_name -> google.protobuf.Timestamp
	28, // 15: cake.Cake.date_creation:type_name -> google.protobuf.Timestamp
	26, // 16: cake.Cake.images:type_name -> cake.Cake.CakeImage
	29, // 17: cake.User.fio:type_name -> google.protobuf.StringValue
	29, // 18: cake.User.phone:type_name -> google.protobuf.StringValue
	29, // 19: cake.User.imageURL:type_name -> google.protobuf.StringValue
	29, // 20: cake.User.headerImageURL:type_name -> google.protobuf.StringValue
	0,  // 21: cake.Category.gender_tags:type_name -> cake.CategoryGender
	29, // 22: cake.PreviewCake.description:type_name -> google.protobuf.StringValue
	27, // 23: cake.PreviewCake.discount_kg_price:type_name -> google.protobuf.DoubleValue
	28, // 24: cake.PreviewCake.discount_end_time:type_name -> google.protobuf.Timestamp
	28, // 25: cake.PreviewCake.date_creation:type_name -> google.protobuf.Timestamp
	22, // 26: cake.PreviewCake.owner:type_name -> cake.User
	3,  // 27: cake.CakeService.CreateCake:input_type -> cake.CreateCakeRequest
	1,  // 28: cake.CakeService.Cake:input_type -> cake.CakeRequest
	30, // 29: cake.CakeService.Cakes:input_type -> google.protobuf.Empty
	14, // 30: cake.CakeService.CategoryPreviewCakes:input_type -> cake.CategoryPreviewCakesReq
	5,  // 31: cake.CakeService.CreateFilling:input_type -> cake.CreateFillingRequest
	30, // 32: cake.CakeService.Fillings:input_type -> google.protobuf.Empty
	16, // 33: cake.CakeService.AddCakeColors:input_type -> cake.AddCakeColorsReq
	30, // 34: cake.CakeService.GetColors:input_type -> google.protobuf.Empty
	18, // 35: cake.CakeService.Add3DModel:input_type -> cake.Add3DModelReq
	20, // 36: cake.CakeService.SetCakeVisibility:input_type -> cake.SetCakeVisibilityReq
	7,  // 37: cake.CakeService.CreateCategory:input_type -> cake.CreateCategoryRequest
	30, // 38: cake.CakeService.Categories:input_type -> google.protobuf.Empty
	12, // 39: cake.CakeService.GetCategoriesByGenderName:input_type -> cake.GetCategoriesByGenderNameReq
	4,  // 40: cake.CakeService.CreateCake:output_type -> cake.CreateCakeResponse
	2,  // 41: cake.CakeService.Cake:output_type -> cake.CakeResponse
	11, // 42: cake.CakeService.Cakes:output_type -> cake.CakesResponse
	15, // 43: cake.CakeService.CategoryPreviewCakes:output_type -> cake.CategoryPreviewCakesRes
	6,  // 44: cake.CakeService.CreateFilling:output_type -> cake.CreateFillingResponse
	10, // 45: cake.CakeService.Fillings:output_type -> cake.FillingsResponse
	30, // 46: cake.CakeService.AddCakeColors:output_type -> google.protobuf.Empty
	17, // 47: cake.CakeService.GetColors:output_type -> cake.CakeColorsRes
	19, // 48: cake.CakeService.Add3DModel:output_type -> cake.Add3DModelRes
	30, // 49: cake.CakeService.SetCakeVisibility:output_type -> google.protobuf.Empty
	8,  // 50: cake.CakeService.CreateCategory:output_type -> cake.CreateCategoryResponse
	9,  // 51: cake.CakeService.Categories:output_type -> cake.CategoriesResponse
	13, // 52: cake.CakeService.GetCategoriesByGenderName:output_type -> cake.GetCategoriesByGenderNameRes
	40, // [40:53] is the sub-list for method output_type
	27, // [27:40] is the sub-list for method input_type
	27, // [27:27] is the sub-list for extension type_name
	27, // [27:27] is the sub-list for extension extendee
	0,  // [0:27] is the sub-list for field type_name
}

func init() { file_cake_proto_init() }
func file_cake_proto_init() {
	if File_cake_proto != nil {
		return
	}
	file_cake_proto_msgTypes[2].OneofWrappers = []any{}
	file_cake_proto_msgTypes[20].OneofWrappers = []any{}
	file_cake_proto_msgTypes[24].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_cake_proto_rawDesc), len(file_cake_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   26,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_cake_proto_goTypes,
		DependencyIndexes: file_cake_proto_depIdxs,
		EnumInfos:         file_cake_proto_enumTypes,
		MessageInfos:      file_cake_proto_msgTypes,
	}.Build()
	File_cake_proto = out.File
	file_cake_proto_goTypes = nil
	file_cake_proto_depIdxs = nil
}
