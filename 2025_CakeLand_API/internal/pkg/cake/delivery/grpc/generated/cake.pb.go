// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v5.29.3
// source: cake.proto

package generated

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CakeRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CakeId        string                 `protobuf:"bytes,1,opt,name=cake_id,json=cakeId,proto3" json:"cake_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CakeRequest) Reset() {
	*x = CakeRequest{}
	mi := &file_cake_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CakeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CakeRequest) ProtoMessage() {}

func (x *CakeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cake_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CakeRequest.ProtoReflect.Descriptor instead.
func (*CakeRequest) Descriptor() ([]byte, []int) {
	return file_cake_proto_rawDescGZIP(), []int{0}
}

func (x *CakeRequest) GetCakeId() string {
	if x != nil {
		return x.CakeId
	}
	return ""
}

type CakeResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Cake          *Cake                  `protobuf:"bytes,1,opt,name=cake,proto3" json:"cake,omitempty"` // Информация о торте
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CakeResponse) Reset() {
	*x = CakeResponse{}
	mi := &file_cake_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CakeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CakeResponse) ProtoMessage() {}

func (x *CakeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cake_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CakeResponse.ProtoReflect.Descriptor instead.
func (*CakeResponse) Descriptor() ([]byte, []int) {
	return file_cake_proto_rawDescGZIP(), []int{1}
}

func (x *CakeResponse) GetCake() *Cake {
	if x != nil {
		return x.Cake
	}
	return nil
}

type CreateCakeRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`                                             // Название торта
	ImageData     []byte                 `protobuf:"bytes,2,opt,name=image_data,json=imageData,proto3" json:"image_data,omitempty"`                  // Данные изображения торта
	KgPrice       float64                `protobuf:"fixed64,3,opt,name=kg_price,json=kgPrice,proto3" json:"kg_price,omitempty"`                      // Цена за кг
	Rating        int32                  `protobuf:"varint,4,opt,name=rating,proto3" json:"rating,omitempty"`                                        // Рейтинг (0-5)
	Description   string                 `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`                               // Описание торта
	Mass          float64                `protobuf:"fixed64,6,opt,name=mass,proto3" json:"mass,omitempty"`                                           // Масса торта
	IsOpenForSale bool                   `protobuf:"varint,7,opt,name=is_open_for_sale,json=isOpenForSale,proto3" json:"is_open_for_sale,omitempty"` // Доступен ли для продажи
	FillingIds    []string               `protobuf:"bytes,8,rep,name=filling_ids,json=fillingIds,proto3" json:"filling_ids,omitempty"`               // Список ID начинок
	CategoryIds   []string               `protobuf:"bytes,9,rep,name=category_ids,json=categoryIds,proto3" json:"category_ids,omitempty"`            // Список ID категорий
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateCakeRequest) Reset() {
	*x = CreateCakeRequest{}
	mi := &file_cake_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateCakeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCakeRequest) ProtoMessage() {}

func (x *CreateCakeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cake_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCakeRequest.ProtoReflect.Descriptor instead.
func (*CreateCakeRequest) Descriptor() ([]byte, []int) {
	return file_cake_proto_rawDescGZIP(), []int{2}
}

func (x *CreateCakeRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateCakeRequest) GetImageData() []byte {
	if x != nil {
		return x.ImageData
	}
	return nil
}

func (x *CreateCakeRequest) GetKgPrice() float64 {
	if x != nil {
		return x.KgPrice
	}
	return 0
}

func (x *CreateCakeRequest) GetRating() int32 {
	if x != nil {
		return x.Rating
	}
	return 0
}

func (x *CreateCakeRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CreateCakeRequest) GetMass() float64 {
	if x != nil {
		return x.Mass
	}
	return 0
}

func (x *CreateCakeRequest) GetIsOpenForSale() bool {
	if x != nil {
		return x.IsOpenForSale
	}
	return false
}

func (x *CreateCakeRequest) GetFillingIds() []string {
	if x != nil {
		return x.FillingIds
	}
	return nil
}

func (x *CreateCakeRequest) GetCategoryIds() []string {
	if x != nil {
		return x.CategoryIds
	}
	return nil
}

type CreateCakeResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	CakeId        string                 `protobuf:"bytes,1,opt,name=cake_id,json=cakeId,proto3" json:"cake_id,omitempty"` // ID созданного торта
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateCakeResponse) Reset() {
	*x = CreateCakeResponse{}
	mi := &file_cake_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateCakeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCakeResponse) ProtoMessage() {}

func (x *CreateCakeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cake_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCakeResponse.ProtoReflect.Descriptor instead.
func (*CreateCakeResponse) Descriptor() ([]byte, []int) {
	return file_cake_proto_rawDescGZIP(), []int{3}
}

func (x *CreateCakeResponse) GetCakeId() string {
	if x != nil {
		return x.CakeId
	}
	return ""
}

type CreateFillingRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`                            // Название начинки
	ImageData     []byte                 `protobuf:"bytes,2,opt,name=image_data,json=imageData,proto3" json:"image_data,omitempty"` // Данные изображения начинки
	Content       string                 `protobuf:"bytes,3,opt,name=content,proto3" json:"content,omitempty"`                      // Состав начинки
	KgPrice       float64                `protobuf:"fixed64,4,opt,name=kg_price,json=kgPrice,proto3" json:"kg_price,omitempty"`     // Цена за кг
	Description   string                 `protobuf:"bytes,5,opt,name=description,proto3" json:"description,omitempty"`              // Описание начинки
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateFillingRequest) Reset() {
	*x = CreateFillingRequest{}
	mi := &file_cake_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateFillingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateFillingRequest) ProtoMessage() {}

func (x *CreateFillingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cake_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateFillingRequest.ProtoReflect.Descriptor instead.
func (*CreateFillingRequest) Descriptor() ([]byte, []int) {
	return file_cake_proto_rawDescGZIP(), []int{4}
}

func (x *CreateFillingRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateFillingRequest) GetImageData() []byte {
	if x != nil {
		return x.ImageData
	}
	return nil
}

func (x *CreateFillingRequest) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *CreateFillingRequest) GetKgPrice() float64 {
	if x != nil {
		return x.KgPrice
	}
	return 0
}

func (x *CreateFillingRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

type CreateFillingResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Filling       *Filling               `protobuf:"bytes,1,opt,name=filling,proto3" json:"filling,omitempty"` // Созданная начинка
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateFillingResponse) Reset() {
	*x = CreateFillingResponse{}
	mi := &file_cake_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateFillingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateFillingResponse) ProtoMessage() {}

func (x *CreateFillingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cake_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateFillingResponse.ProtoReflect.Descriptor instead.
func (*CreateFillingResponse) Descriptor() ([]byte, []int) {
	return file_cake_proto_rawDescGZIP(), []int{5}
}

func (x *CreateFillingResponse) GetFilling() *Filling {
	if x != nil {
		return x.Filling
	}
	return nil
}

type CreateCategoryRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	ImageData     []byte                 `protobuf:"bytes,2,opt,name=image_data,json=imageData,proto3" json:"image_data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateCategoryRequest) Reset() {
	*x = CreateCategoryRequest{}
	mi := &file_cake_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateCategoryRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCategoryRequest) ProtoMessage() {}

func (x *CreateCategoryRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cake_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCategoryRequest.ProtoReflect.Descriptor instead.
func (*CreateCategoryRequest) Descriptor() ([]byte, []int) {
	return file_cake_proto_rawDescGZIP(), []int{6}
}

func (x *CreateCategoryRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CreateCategoryRequest) GetImageData() []byte {
	if x != nil {
		return x.ImageData
	}
	return nil
}

type CreateCategoryResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Category      *Category              `protobuf:"bytes,1,opt,name=category,proto3" json:"category,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CreateCategoryResponse) Reset() {
	*x = CreateCategoryResponse{}
	mi := &file_cake_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateCategoryResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateCategoryResponse) ProtoMessage() {}

func (x *CreateCategoryResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cake_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateCategoryResponse.ProtoReflect.Descriptor instead.
func (*CreateCategoryResponse) Descriptor() ([]byte, []int) {
	return file_cake_proto_rawDescGZIP(), []int{7}
}

func (x *CreateCategoryResponse) GetCategory() *Category {
	if x != nil {
		return x.Category
	}
	return nil
}

type CategoriesResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Categories    []*Category            `protobuf:"bytes,1,rep,name=categories,proto3" json:"categories,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CategoriesResponse) Reset() {
	*x = CategoriesResponse{}
	mi := &file_cake_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CategoriesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CategoriesResponse) ProtoMessage() {}

func (x *CategoriesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cake_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CategoriesResponse.ProtoReflect.Descriptor instead.
func (*CategoriesResponse) Descriptor() ([]byte, []int) {
	return file_cake_proto_rawDescGZIP(), []int{8}
}

func (x *CategoriesResponse) GetCategories() []*Category {
	if x != nil {
		return x.Categories
	}
	return nil
}

type FillingsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Fillings      []*Filling             `protobuf:"bytes,1,rep,name=fillings,proto3" json:"fillings,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *FillingsResponse) Reset() {
	*x = FillingsResponse{}
	mi := &file_cake_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FillingsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FillingsResponse) ProtoMessage() {}

func (x *FillingsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cake_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FillingsResponse.ProtoReflect.Descriptor instead.
func (*FillingsResponse) Descriptor() ([]byte, []int) {
	return file_cake_proto_rawDescGZIP(), []int{9}
}

func (x *FillingsResponse) GetFillings() []*Filling {
	if x != nil {
		return x.Fillings
	}
	return nil
}

type CakesResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Cakes         []*Cake                `protobuf:"bytes,1,rep,name=cakes,proto3" json:"cakes,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CakesResponse) Reset() {
	*x = CakesResponse{}
	mi := &file_cake_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CakesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CakesResponse) ProtoMessage() {}

func (x *CakesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cake_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CakesResponse.ProtoReflect.Descriptor instead.
func (*CakesResponse) Descriptor() ([]byte, []int) {
	return file_cake_proto_rawDescGZIP(), []int{10}
}

func (x *CakesResponse) GetCakes() []*Cake {
	if x != nil {
		return x.Cakes
	}
	return nil
}

// Информация о торте
type Cake struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`                                                 // ID торта
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                                             // Название торта
	ImageUrl      string                 `protobuf:"bytes,3,opt,name=image_url,json=imageUrl,proto3" json:"image_url,omitempty"`                     // URL изображения торта
	KgPrice       float64                `protobuf:"fixed64,4,opt,name=kg_price,json=kgPrice,proto3" json:"kg_price,omitempty"`                      // Цена за кг
	Rating        int32                  `protobuf:"varint,5,opt,name=rating,proto3" json:"rating,omitempty"`                                        // Рейтинг (0-5)
	Description   string                 `protobuf:"bytes,6,opt,name=description,proto3" json:"description,omitempty"`                               // Описание торта
	Mass          float64                `protobuf:"fixed64,7,opt,name=mass,proto3" json:"mass,omitempty"`                                           // Масса торта
	IsOpenForSale bool                   `protobuf:"varint,8,opt,name=is_open_for_sale,json=isOpenForSale,proto3" json:"is_open_for_sale,omitempty"` // Доступен ли для продажи
	Owner         *User                  `protobuf:"bytes,9,opt,name=owner,proto3" json:"owner,omitempty"`                                           // Информация о владельце
	Fillings      []*Filling             `protobuf:"bytes,10,rep,name=fillings,proto3" json:"fillings,omitempty"`                                    // Список начинок
	Categories    []*Category            `protobuf:"bytes,11,rep,name=categories,proto3" json:"categories,omitempty"`                                // Список категорий
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Cake) Reset() {
	*x = Cake{}
	mi := &file_cake_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Cake) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Cake) ProtoMessage() {}

func (x *Cake) ProtoReflect() protoreflect.Message {
	mi := &file_cake_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Cake.ProtoReflect.Descriptor instead.
func (*Cake) Descriptor() ([]byte, []int) {
	return file_cake_proto_rawDescGZIP(), []int{11}
}

func (x *Cake) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Cake) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Cake) GetImageUrl() string {
	if x != nil {
		return x.ImageUrl
	}
	return ""
}

func (x *Cake) GetKgPrice() float64 {
	if x != nil {
		return x.KgPrice
	}
	return 0
}

func (x *Cake) GetRating() int32 {
	if x != nil {
		return x.Rating
	}
	return 0
}

func (x *Cake) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Cake) GetMass() float64 {
	if x != nil {
		return x.Mass
	}
	return 0
}

func (x *Cake) GetIsOpenForSale() bool {
	if x != nil {
		return x.IsOpenForSale
	}
	return false
}

func (x *Cake) GetOwner() *User {
	if x != nil {
		return x.Owner
	}
	return nil
}

func (x *Cake) GetFillings() []*Filling {
	if x != nil {
		return x.Fillings
	}
	return nil
}

func (x *Cake) GetCategories() []*Category {
	if x != nil {
		return x.Categories
	}
	return nil
}

// Информация о владельце
type User struct {
	state         protoimpl.MessageState  `protogen:"open.v1"`
	Id            string                  `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`             // ID пользователя
	Fio           *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=fio,proto3" json:"fio,omitempty"`           // Полное имя
	Nickname      string                  `protobuf:"bytes,3,opt,name=nickname,proto3" json:"nickname,omitempty"` // Никнейм
	Mail          string                  `protobuf:"bytes,4,opt,name=mail,proto3" json:"mail,omitempty"`         // Электронная почта
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *User) Reset() {
	*x = User{}
	mi := &file_cake_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *User) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*User) ProtoMessage() {}

func (x *User) ProtoReflect() protoreflect.Message {
	mi := &file_cake_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use User.ProtoReflect.Descriptor instead.
func (*User) Descriptor() ([]byte, []int) {
	return file_cake_proto_rawDescGZIP(), []int{12}
}

func (x *User) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *User) GetFio() *wrapperspb.StringValue {
	if x != nil {
		return x.Fio
	}
	return nil
}

func (x *User) GetNickname() string {
	if x != nil {
		return x.Nickname
	}
	return ""
}

func (x *User) GetMail() string {
	if x != nil {
		return x.Mail
	}
	return ""
}

// Информация о начинке
type Filling struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`                             // ID начинки
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                         // Название начинки
	ImageUrl      string                 `protobuf:"bytes,3,opt,name=image_url,json=imageUrl,proto3" json:"image_url,omitempty"` // URL изображения начинки
	Content       string                 `protobuf:"bytes,4,opt,name=content,proto3" json:"content,omitempty"`                   // Состав начинки
	KgPrice       float64                `protobuf:"fixed64,5,opt,name=kg_price,json=kgPrice,proto3" json:"kg_price,omitempty"`  // Цена за кг
	Description   string                 `protobuf:"bytes,6,opt,name=description,proto3" json:"description,omitempty"`           // Описание начинки
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Filling) Reset() {
	*x = Filling{}
	mi := &file_cake_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Filling) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Filling) ProtoMessage() {}

func (x *Filling) ProtoReflect() protoreflect.Message {
	mi := &file_cake_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Filling.ProtoReflect.Descriptor instead.
func (*Filling) Descriptor() ([]byte, []int) {
	return file_cake_proto_rawDescGZIP(), []int{13}
}

func (x *Filling) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Filling) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Filling) GetImageUrl() string {
	if x != nil {
		return x.ImageUrl
	}
	return ""
}

func (x *Filling) GetContent() string {
	if x != nil {
		return x.Content
	}
	return ""
}

func (x *Filling) GetKgPrice() float64 {
	if x != nil {
		return x.KgPrice
	}
	return 0
}

func (x *Filling) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

// Информация о категории
type Category struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`                             // ID категории
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`                         // Название категории
	ImageUrl      string                 `protobuf:"bytes,3,opt,name=image_url,json=imageUrl,proto3" json:"image_url,omitempty"` // URL изображения категории
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Category) Reset() {
	*x = Category{}
	mi := &file_cake_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Category) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Category) ProtoMessage() {}

func (x *Category) ProtoReflect() protoreflect.Message {
	mi := &file_cake_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Category.ProtoReflect.Descriptor instead.
func (*Category) Descriptor() ([]byte, []int) {
	return file_cake_proto_rawDescGZIP(), []int{14}
}

func (x *Category) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Category) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Category) GetImageUrl() string {
	if x != nil {
		return x.ImageUrl
	}
	return ""
}

var File_cake_proto protoreflect.FileDescriptor

var file_cake_proto_rawDesc = string([]byte{
	0x0a, 0x0a, 0x63, 0x61, 0x6b, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d,
	0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x26, 0x0a, 0x0b, 0x43, 0x61, 0x6b,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x61, 0x6b, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x61, 0x6b, 0x65, 0x49,
	0x64, 0x22, 0x29, 0x0a, 0x0c, 0x43, 0x61, 0x6b, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x19, 0x0a, 0x04, 0x63, 0x61, 0x6b, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x05, 0x2e, 0x43, 0x61, 0x6b, 0x65, 0x52, 0x04, 0x63, 0x61, 0x6b, 0x65, 0x22, 0x9c, 0x02, 0x0a,
	0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x61, 0x6b, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x69, 0x6d, 0x61, 0x67,
	0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x19, 0x0a, 0x08, 0x6b, 0x67, 0x5f, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x6b, 0x67, 0x50, 0x72, 0x69, 0x63, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x61,
	0x73, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x6d, 0x61, 0x73, 0x73, 0x12, 0x27,
	0x0a, 0x10, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x73, 0x61,
	0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x69, 0x73, 0x4f, 0x70, 0x65, 0x6e,
	0x46, 0x6f, 0x72, 0x53, 0x61, 0x6c, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x69, 0x6c, 0x6c, 0x69,
	0x6e, 0x67, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x69,
	0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x63, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b,
	0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x49, 0x64, 0x73, 0x22, 0x2d, 0x0a, 0x12, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x61, 0x6b, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x17, 0x0a, 0x07, 0x63, 0x61, 0x6b, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x63, 0x61, 0x6b, 0x65, 0x49, 0x64, 0x22, 0xa0, 0x01, 0x0a, 0x14, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e,
	0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x12, 0x19, 0x0a, 0x08, 0x6b, 0x67, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x07, 0x6b, 0x67, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x3b, 0x0a,
	0x15, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x22, 0x0a, 0x07, 0x66, 0x69, 0x6c, 0x6c, 0x69, 0x6e,
	0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x46, 0x69, 0x6c, 0x6c, 0x69, 0x6e,
	0x67, 0x52, 0x07, 0x66, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x22, 0x4a, 0x0a, 0x15, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x69, 0x6d, 0x61,
	0x67, 0x65, 0x44, 0x61, 0x74, 0x61, 0x22, 0x3f, 0x0a, 0x16, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x25, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x09, 0x2e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x08, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x22, 0x3f, 0x0a, 0x12, 0x43, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x29, 0x0a,
	0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x09, 0x2e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x0a, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x22, 0x38, 0x0a, 0x10, 0x46, 0x69, 0x6c, 0x6c,
	0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x24, 0x0a, 0x08,
	0x66, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x08,
	0x2e, 0x46, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x6c, 0x69, 0x6e,
	0x67, 0x73, 0x22, 0x2c, 0x0a, 0x0d, 0x43, 0x61, 0x6b, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x05, 0x63, 0x61, 0x6b, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x05, 0x2e, 0x43, 0x61, 0x6b, 0x65, 0x52, 0x05, 0x63, 0x61, 0x6b, 0x65, 0x73,
	0x22, 0xc7, 0x02, 0x0a, 0x04, 0x43, 0x61, 0x6b, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a,
	0x09, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x19, 0x0a, 0x08, 0x6b, 0x67,
	0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x6b, 0x67,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x20, 0x0a,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x12, 0x0a, 0x04, 0x6d, 0x61, 0x73, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x6d,
	0x61, 0x73, 0x73, 0x12, 0x27, 0x0a, 0x10, 0x69, 0x73, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x66,
	0x6f, 0x72, 0x5f, 0x73, 0x61, 0x6c, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x69,
	0x73, 0x4f, 0x70, 0x65, 0x6e, 0x46, 0x6f, 0x72, 0x53, 0x61, 0x6c, 0x65, 0x12, 0x1b, 0x0a, 0x05,
	0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x05, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x08, 0x66, 0x69, 0x6c,
	0x6c, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x08, 0x2e, 0x46, 0x69,
	0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x73, 0x12,
	0x29, 0x0a, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x18, 0x0b, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x09, 0x2e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x0a,
	0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x22, 0x76, 0x0a, 0x04, 0x55, 0x73,
	0x65, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x2e, 0x0a, 0x03, 0x66, 0x69, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x03, 0x66,
	0x69, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6e, 0x69, 0x63, 0x6b, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6d, 0x61,
	0x69, 0x6c, 0x22, 0xa1, 0x01, 0x0a, 0x07, 0x46, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x12, 0x0e,
	0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x12,
	0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x6b, 0x67, 0x5f,
	0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x6b, 0x67, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x4b, 0x0a, 0x08, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x5f,
	0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6d, 0x61, 0x67, 0x65,
	0x55, 0x72, 0x6c, 0x32, 0x8f, 0x03, 0x0a, 0x0b, 0x43, 0x61, 0x6b, 0x65, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x23, 0x0a, 0x04, 0x43, 0x61, 0x6b, 0x65, 0x12, 0x0c, 0x2e, 0x43, 0x61,
	0x6b, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x0d, 0x2e, 0x43, 0x61, 0x6b, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x43, 0x61, 0x6b, 0x65, 0x12, 0x12, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43,
	0x61, 0x6b, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x43, 0x61, 0x6b, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x3e, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67,
	0x12, 0x15, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x46, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x41, 0x0a, 0x0e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x12, 0x16, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x17, 0x2e, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73,
	0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x13, 0x2e, 0x43, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a,
	0x08, 0x46, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x1a, 0x11, 0x2e, 0x46, 0x69, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x05, 0x43, 0x61, 0x6b, 0x65, 0x73, 0x12, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x0e, 0x2e, 0x43, 0x61, 0x6b, 0x65, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x2b, 0x5a, 0x29, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x63, 0x61, 0x6b, 0x65, 0x2f, 0x64, 0x65, 0x6c, 0x69, 0x76,
	0x65, 0x72, 0x79, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x2f, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74,
	0x65, 0x64, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
})

var (
	file_cake_proto_rawDescOnce sync.Once
	file_cake_proto_rawDescData []byte
)

func file_cake_proto_rawDescGZIP() []byte {
	file_cake_proto_rawDescOnce.Do(func() {
		file_cake_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_cake_proto_rawDesc), len(file_cake_proto_rawDesc)))
	})
	return file_cake_proto_rawDescData
}

var file_cake_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_cake_proto_goTypes = []any{
	(*CakeRequest)(nil),            // 0: CakeRequest
	(*CakeResponse)(nil),           // 1: CakeResponse
	(*CreateCakeRequest)(nil),      // 2: CreateCakeRequest
	(*CreateCakeResponse)(nil),     // 3: CreateCakeResponse
	(*CreateFillingRequest)(nil),   // 4: CreateFillingRequest
	(*CreateFillingResponse)(nil),  // 5: CreateFillingResponse
	(*CreateCategoryRequest)(nil),  // 6: CreateCategoryRequest
	(*CreateCategoryResponse)(nil), // 7: CreateCategoryResponse
	(*CategoriesResponse)(nil),     // 8: CategoriesResponse
	(*FillingsResponse)(nil),       // 9: FillingsResponse
	(*CakesResponse)(nil),          // 10: CakesResponse
	(*Cake)(nil),                   // 11: Cake
	(*User)(nil),                   // 12: User
	(*Filling)(nil),                // 13: Filling
	(*Category)(nil),               // 14: Category
	(*wrapperspb.StringValue)(nil), // 15: google.protobuf.StringValue
	(*emptypb.Empty)(nil),          // 16: google.protobuf.Empty
}
var file_cake_proto_depIdxs = []int32{
	11, // 0: CakeResponse.cake:type_name -> Cake
	13, // 1: CreateFillingResponse.filling:type_name -> Filling
	14, // 2: CreateCategoryResponse.category:type_name -> Category
	14, // 3: CategoriesResponse.categories:type_name -> Category
	13, // 4: FillingsResponse.fillings:type_name -> Filling
	11, // 5: CakesResponse.cakes:type_name -> Cake
	12, // 6: Cake.owner:type_name -> User
	13, // 7: Cake.fillings:type_name -> Filling
	14, // 8: Cake.categories:type_name -> Category
	15, // 9: User.fio:type_name -> google.protobuf.StringValue
	0,  // 10: CakeService.Cake:input_type -> CakeRequest
	2,  // 11: CakeService.CreateCake:input_type -> CreateCakeRequest
	4,  // 12: CakeService.CreateFilling:input_type -> CreateFillingRequest
	6,  // 13: CakeService.CreateCategory:input_type -> CreateCategoryRequest
	16, // 14: CakeService.Categories:input_type -> google.protobuf.Empty
	16, // 15: CakeService.Fillings:input_type -> google.protobuf.Empty
	16, // 16: CakeService.Cakes:input_type -> google.protobuf.Empty
	1,  // 17: CakeService.Cake:output_type -> CakeResponse
	3,  // 18: CakeService.CreateCake:output_type -> CreateCakeResponse
	5,  // 19: CakeService.CreateFilling:output_type -> CreateFillingResponse
	7,  // 20: CakeService.CreateCategory:output_type -> CreateCategoryResponse
	8,  // 21: CakeService.Categories:output_type -> CategoriesResponse
	9,  // 22: CakeService.Fillings:output_type -> FillingsResponse
	10, // 23: CakeService.Cakes:output_type -> CakesResponse
	17, // [17:24] is the sub-list for method output_type
	10, // [10:17] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_cake_proto_init() }
func file_cake_proto_init() {
	if File_cake_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_cake_proto_rawDesc), len(file_cake_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_cake_proto_goTypes,
		DependencyIndexes: file_cake_proto_depIdxs,
		MessageInfos:      file_cake_proto_msgTypes,
	}.Build()
	File_cake_proto = out.File
	file_cake_proto_goTypes = nil
	file_cake_proto_depIdxs = nil
}
