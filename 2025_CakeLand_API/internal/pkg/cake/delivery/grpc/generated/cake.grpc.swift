//
// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the protocol buffer compiler.
// Source: cake.proto
//
import GRPC
import NIO
import NIOConcurrencyHelpers
import SwiftProtobuf


/// ############### CakeService ############### 
///
/// Usage: instantiate `Cake_CakeServiceClient`, then call methods of this protocol to make API calls.
internal protocol Cake_CakeServiceClientProtocol: GRPCClient {
  var serviceName: String { get }
  var interceptors: Cake_CakeServiceClientInterceptorFactoryProtocol? { get }

  func createCake(
    _ request: Cake_CreateCakeRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cake_CreateCakeRequest, Cake_CreateCakeResponse>

  func cake(
    _ request: Cake_CakeRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cake_CakeRequest, Cake_CakeResponse>

  func cakes(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions?
  ) -> UnaryCall<SwiftProtobuf.Google_Protobuf_Empty, Cake_CakesResponse>

  func categoryPreviewCakes(
    _ request: Cake_CategoryPreviewCakesReq,
    callOptions: CallOptions?
  ) -> UnaryCall<Cake_CategoryPreviewCakesReq, Cake_CategoryPreviewCakesRes>

  func createFilling(
    _ request: Cake_CreateFillingRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cake_CreateFillingRequest, Cake_CreateFillingResponse>

  func fillings(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions?
  ) -> UnaryCall<SwiftProtobuf.Google_Protobuf_Empty, Cake_FillingsResponse>

  func addCakeColors(
    _ request: Cake_AddCakeColorsReq,
    callOptions: CallOptions?
  ) -> UnaryCall<Cake_AddCakeColorsReq, SwiftProtobuf.Google_Protobuf_Empty>

  func getColors(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions?
  ) -> UnaryCall<SwiftProtobuf.Google_Protobuf_Empty, Cake_CakeColorsRes>

  func add3DModel(
    _ request: Cake_Add3DModelReq,
    callOptions: CallOptions?
  ) -> UnaryCall<Cake_Add3DModelReq, Cake_Add3DModelRes>

  func setCakeVisibility(
    _ request: Cake_SetCakeVisibilityReq,
    callOptions: CallOptions?
  ) -> UnaryCall<Cake_SetCakeVisibilityReq, SwiftProtobuf.Google_Protobuf_Empty>

  func createCategory(
    _ request: Cake_CreateCategoryRequest,
    callOptions: CallOptions?
  ) -> UnaryCall<Cake_CreateCategoryRequest, Cake_CreateCategoryResponse>

  func categories(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions?
  ) -> UnaryCall<SwiftProtobuf.Google_Protobuf_Empty, Cake_CategoriesResponse>

  func getCategoriesByGenderName(
    _ request: Cake_GetCategoriesByGenderNameReq,
    callOptions: CallOptions?
  ) -> UnaryCall<Cake_GetCategoriesByGenderNameReq, Cake_GetCategoriesByGenderNameRes>
}

extension Cake_CakeServiceClientProtocol {
  internal var serviceName: String {
    return "cake.CakeService"
  }

  /// Unary call to CreateCake
  ///
  /// - Parameters:
  ///   - request: Request to send to CreateCake.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func createCake(
    _ request: Cake_CreateCakeRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cake_CreateCakeRequest, Cake_CreateCakeResponse> {
    return self.makeUnaryCall(
      path: Cake_CakeServiceClientMetadata.Methods.createCake.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateCakeInterceptors() ?? []
    )
  }

  /// Unary call to Cake
  ///
  /// - Parameters:
  ///   - request: Request to send to Cake.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func cake(
    _ request: Cake_CakeRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cake_CakeRequest, Cake_CakeResponse> {
    return self.makeUnaryCall(
      path: Cake_CakeServiceClientMetadata.Methods.cake.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCakeInterceptors() ?? []
    )
  }

  /// Unary call to Cakes
  ///
  /// - Parameters:
  ///   - request: Request to send to Cakes.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func cakes(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<SwiftProtobuf.Google_Protobuf_Empty, Cake_CakesResponse> {
    return self.makeUnaryCall(
      path: Cake_CakeServiceClientMetadata.Methods.cakes.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCakesInterceptors() ?? []
    )
  }

  /// Unary call to CategoryPreviewCakes
  ///
  /// - Parameters:
  ///   - request: Request to send to CategoryPreviewCakes.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func categoryPreviewCakes(
    _ request: Cake_CategoryPreviewCakesReq,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cake_CategoryPreviewCakesReq, Cake_CategoryPreviewCakesRes> {
    return self.makeUnaryCall(
      path: Cake_CakeServiceClientMetadata.Methods.categoryPreviewCakes.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCategoryPreviewCakesInterceptors() ?? []
    )
  }

  /// Unary call to CreateFilling
  ///
  /// - Parameters:
  ///   - request: Request to send to CreateFilling.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func createFilling(
    _ request: Cake_CreateFillingRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cake_CreateFillingRequest, Cake_CreateFillingResponse> {
    return self.makeUnaryCall(
      path: Cake_CakeServiceClientMetadata.Methods.createFilling.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateFillingInterceptors() ?? []
    )
  }

  /// Unary call to Fillings
  ///
  /// - Parameters:
  ///   - request: Request to send to Fillings.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func fillings(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<SwiftProtobuf.Google_Protobuf_Empty, Cake_FillingsResponse> {
    return self.makeUnaryCall(
      path: Cake_CakeServiceClientMetadata.Methods.fillings.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeFillingsInterceptors() ?? []
    )
  }

  /// Unary call to AddCakeColors
  ///
  /// - Parameters:
  ///   - request: Request to send to AddCakeColors.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func addCakeColors(
    _ request: Cake_AddCakeColorsReq,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cake_AddCakeColorsReq, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeUnaryCall(
      path: Cake_CakeServiceClientMetadata.Methods.addCakeColors.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAddCakeColorsInterceptors() ?? []
    )
  }

  /// Unary call to GetColors
  ///
  /// - Parameters:
  ///   - request: Request to send to GetColors.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getColors(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<SwiftProtobuf.Google_Protobuf_Empty, Cake_CakeColorsRes> {
    return self.makeUnaryCall(
      path: Cake_CakeServiceClientMetadata.Methods.getColors.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetColorsInterceptors() ?? []
    )
  }

  /// Unary call to Add3DModel
  ///
  /// - Parameters:
  ///   - request: Request to send to Add3DModel.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func add3DModel(
    _ request: Cake_Add3DModelReq,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cake_Add3DModelReq, Cake_Add3DModelRes> {
    return self.makeUnaryCall(
      path: Cake_CakeServiceClientMetadata.Methods.add3DModel.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAdd3DModelInterceptors() ?? []
    )
  }

  /// Unary call to SetCakeVisibility
  ///
  /// - Parameters:
  ///   - request: Request to send to SetCakeVisibility.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func setCakeVisibility(
    _ request: Cake_SetCakeVisibilityReq,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cake_SetCakeVisibilityReq, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeUnaryCall(
      path: Cake_CakeServiceClientMetadata.Methods.setCakeVisibility.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSetCakeVisibilityInterceptors() ?? []
    )
  }

  /// Unary call to CreateCategory
  ///
  /// - Parameters:
  ///   - request: Request to send to CreateCategory.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func createCategory(
    _ request: Cake_CreateCategoryRequest,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cake_CreateCategoryRequest, Cake_CreateCategoryResponse> {
    return self.makeUnaryCall(
      path: Cake_CakeServiceClientMetadata.Methods.createCategory.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateCategoryInterceptors() ?? []
    )
  }

  /// Unary call to Categories
  ///
  /// - Parameters:
  ///   - request: Request to send to Categories.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func categories(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<SwiftProtobuf.Google_Protobuf_Empty, Cake_CategoriesResponse> {
    return self.makeUnaryCall(
      path: Cake_CakeServiceClientMetadata.Methods.categories.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCategoriesInterceptors() ?? []
    )
  }

  /// Unary call to GetCategoriesByGenderName
  ///
  /// - Parameters:
  ///   - request: Request to send to GetCategoriesByGenderName.
  ///   - callOptions: Call options.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  internal func getCategoriesByGenderName(
    _ request: Cake_GetCategoriesByGenderNameReq,
    callOptions: CallOptions? = nil
  ) -> UnaryCall<Cake_GetCategoriesByGenderNameReq, Cake_GetCategoriesByGenderNameRes> {
    return self.makeUnaryCall(
      path: Cake_CakeServiceClientMetadata.Methods.getCategoriesByGenderName.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetCategoriesByGenderNameInterceptors() ?? []
    )
  }
}

@available(*, deprecated)
extension Cake_CakeServiceClient: @unchecked Sendable {}

@available(*, deprecated, renamed: "Cake_CakeServiceNIOClient")
internal final class Cake_CakeServiceClient: Cake_CakeServiceClientProtocol {
  private let lock = Lock()
  private var _defaultCallOptions: CallOptions
  private var _interceptors: Cake_CakeServiceClientInterceptorFactoryProtocol?
  internal let channel: GRPCChannel
  internal var defaultCallOptions: CallOptions {
    get { self.lock.withLock { return self._defaultCallOptions } }
    set { self.lock.withLockVoid { self._defaultCallOptions = newValue } }
  }
  internal var interceptors: Cake_CakeServiceClientInterceptorFactoryProtocol? {
    get { self.lock.withLock { return self._interceptors } }
    set { self.lock.withLockVoid { self._interceptors = newValue } }
  }

  /// Creates a client for the cake.CakeService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Cake_CakeServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self._defaultCallOptions = defaultCallOptions
    self._interceptors = interceptors
  }
}

internal struct Cake_CakeServiceNIOClient: Cake_CakeServiceClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Cake_CakeServiceClientInterceptorFactoryProtocol?

  /// Creates a client for the cake.CakeService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  ///   - interceptors: A factory providing interceptors for each RPC.
  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Cake_CakeServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

/// ############### CakeService ############### 
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Cake_CakeServiceAsyncClientProtocol: GRPCClient {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Cake_CakeServiceClientInterceptorFactoryProtocol? { get }

  func makeCreateCakeCall(
    _ request: Cake_CreateCakeRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cake_CreateCakeRequest, Cake_CreateCakeResponse>

  func makeCakeCall(
    _ request: Cake_CakeRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cake_CakeRequest, Cake_CakeResponse>

  func makeCakesCall(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<SwiftProtobuf.Google_Protobuf_Empty, Cake_CakesResponse>

  func makeCategoryPreviewCakesCall(
    _ request: Cake_CategoryPreviewCakesReq,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cake_CategoryPreviewCakesReq, Cake_CategoryPreviewCakesRes>

  func makeCreateFillingCall(
    _ request: Cake_CreateFillingRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cake_CreateFillingRequest, Cake_CreateFillingResponse>

  func makeFillingsCall(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<SwiftProtobuf.Google_Protobuf_Empty, Cake_FillingsResponse>

  func makeAddCakeColorsCall(
    _ request: Cake_AddCakeColorsReq,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cake_AddCakeColorsReq, SwiftProtobuf.Google_Protobuf_Empty>

  func makeGetColorsCall(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<SwiftProtobuf.Google_Protobuf_Empty, Cake_CakeColorsRes>

  func makeAdd3DmodelCall(
    _ request: Cake_Add3DModelReq,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cake_Add3DModelReq, Cake_Add3DModelRes>

  func makeSetCakeVisibilityCall(
    _ request: Cake_SetCakeVisibilityReq,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cake_SetCakeVisibilityReq, SwiftProtobuf.Google_Protobuf_Empty>

  func makeCreateCategoryCall(
    _ request: Cake_CreateCategoryRequest,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cake_CreateCategoryRequest, Cake_CreateCategoryResponse>

  func makeCategoriesCall(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<SwiftProtobuf.Google_Protobuf_Empty, Cake_CategoriesResponse>

  func makeGetCategoriesByGenderNameCall(
    _ request: Cake_GetCategoriesByGenderNameReq,
    callOptions: CallOptions?
  ) -> GRPCAsyncUnaryCall<Cake_GetCategoriesByGenderNameReq, Cake_GetCategoriesByGenderNameRes>
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Cake_CakeServiceAsyncClientProtocol {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Cake_CakeServiceClientMetadata.serviceDescriptor
  }

  internal var interceptors: Cake_CakeServiceClientInterceptorFactoryProtocol? {
    return nil
  }

  internal func makeCreateCakeCall(
    _ request: Cake_CreateCakeRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cake_CreateCakeRequest, Cake_CreateCakeResponse> {
    return self.makeAsyncUnaryCall(
      path: Cake_CakeServiceClientMetadata.Methods.createCake.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateCakeInterceptors() ?? []
    )
  }

  internal func makeCakeCall(
    _ request: Cake_CakeRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cake_CakeRequest, Cake_CakeResponse> {
    return self.makeAsyncUnaryCall(
      path: Cake_CakeServiceClientMetadata.Methods.cake.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCakeInterceptors() ?? []
    )
  }

  internal func makeCakesCall(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<SwiftProtobuf.Google_Protobuf_Empty, Cake_CakesResponse> {
    return self.makeAsyncUnaryCall(
      path: Cake_CakeServiceClientMetadata.Methods.cakes.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCakesInterceptors() ?? []
    )
  }

  internal func makeCategoryPreviewCakesCall(
    _ request: Cake_CategoryPreviewCakesReq,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cake_CategoryPreviewCakesReq, Cake_CategoryPreviewCakesRes> {
    return self.makeAsyncUnaryCall(
      path: Cake_CakeServiceClientMetadata.Methods.categoryPreviewCakes.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCategoryPreviewCakesInterceptors() ?? []
    )
  }

  internal func makeCreateFillingCall(
    _ request: Cake_CreateFillingRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cake_CreateFillingRequest, Cake_CreateFillingResponse> {
    return self.makeAsyncUnaryCall(
      path: Cake_CakeServiceClientMetadata.Methods.createFilling.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateFillingInterceptors() ?? []
    )
  }

  internal func makeFillingsCall(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<SwiftProtobuf.Google_Protobuf_Empty, Cake_FillingsResponse> {
    return self.makeAsyncUnaryCall(
      path: Cake_CakeServiceClientMetadata.Methods.fillings.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeFillingsInterceptors() ?? []
    )
  }

  internal func makeAddCakeColorsCall(
    _ request: Cake_AddCakeColorsReq,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cake_AddCakeColorsReq, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeAsyncUnaryCall(
      path: Cake_CakeServiceClientMetadata.Methods.addCakeColors.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAddCakeColorsInterceptors() ?? []
    )
  }

  internal func makeGetColorsCall(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<SwiftProtobuf.Google_Protobuf_Empty, Cake_CakeColorsRes> {
    return self.makeAsyncUnaryCall(
      path: Cake_CakeServiceClientMetadata.Methods.getColors.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetColorsInterceptors() ?? []
    )
  }

  internal func makeAdd3DmodelCall(
    _ request: Cake_Add3DModelReq,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cake_Add3DModelReq, Cake_Add3DModelRes> {
    return self.makeAsyncUnaryCall(
      path: Cake_CakeServiceClientMetadata.Methods.add3DModel.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAdd3DModelInterceptors() ?? []
    )
  }

  internal func makeSetCakeVisibilityCall(
    _ request: Cake_SetCakeVisibilityReq,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cake_SetCakeVisibilityReq, SwiftProtobuf.Google_Protobuf_Empty> {
    return self.makeAsyncUnaryCall(
      path: Cake_CakeServiceClientMetadata.Methods.setCakeVisibility.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSetCakeVisibilityInterceptors() ?? []
    )
  }

  internal func makeCreateCategoryCall(
    _ request: Cake_CreateCategoryRequest,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cake_CreateCategoryRequest, Cake_CreateCategoryResponse> {
    return self.makeAsyncUnaryCall(
      path: Cake_CakeServiceClientMetadata.Methods.createCategory.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateCategoryInterceptors() ?? []
    )
  }

  internal func makeCategoriesCall(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<SwiftProtobuf.Google_Protobuf_Empty, Cake_CategoriesResponse> {
    return self.makeAsyncUnaryCall(
      path: Cake_CakeServiceClientMetadata.Methods.categories.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCategoriesInterceptors() ?? []
    )
  }

  internal func makeGetCategoriesByGenderNameCall(
    _ request: Cake_GetCategoriesByGenderNameReq,
    callOptions: CallOptions? = nil
  ) -> GRPCAsyncUnaryCall<Cake_GetCategoriesByGenderNameReq, Cake_GetCategoriesByGenderNameRes> {
    return self.makeAsyncUnaryCall(
      path: Cake_CakeServiceClientMetadata.Methods.getCategoriesByGenderName.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetCategoriesByGenderNameInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Cake_CakeServiceAsyncClientProtocol {
  internal func createCake(
    _ request: Cake_CreateCakeRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Cake_CreateCakeResponse {
    return try await self.performAsyncUnaryCall(
      path: Cake_CakeServiceClientMetadata.Methods.createCake.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateCakeInterceptors() ?? []
    )
  }

  internal func cake(
    _ request: Cake_CakeRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Cake_CakeResponse {
    return try await self.performAsyncUnaryCall(
      path: Cake_CakeServiceClientMetadata.Methods.cake.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCakeInterceptors() ?? []
    )
  }

  internal func cakes(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions? = nil
  ) async throws -> Cake_CakesResponse {
    return try await self.performAsyncUnaryCall(
      path: Cake_CakeServiceClientMetadata.Methods.cakes.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCakesInterceptors() ?? []
    )
  }

  internal func categoryPreviewCakes(
    _ request: Cake_CategoryPreviewCakesReq,
    callOptions: CallOptions? = nil
  ) async throws -> Cake_CategoryPreviewCakesRes {
    return try await self.performAsyncUnaryCall(
      path: Cake_CakeServiceClientMetadata.Methods.categoryPreviewCakes.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCategoryPreviewCakesInterceptors() ?? []
    )
  }

  internal func createFilling(
    _ request: Cake_CreateFillingRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Cake_CreateFillingResponse {
    return try await self.performAsyncUnaryCall(
      path: Cake_CakeServiceClientMetadata.Methods.createFilling.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateFillingInterceptors() ?? []
    )
  }

  internal func fillings(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions? = nil
  ) async throws -> Cake_FillingsResponse {
    return try await self.performAsyncUnaryCall(
      path: Cake_CakeServiceClientMetadata.Methods.fillings.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeFillingsInterceptors() ?? []
    )
  }

  internal func addCakeColors(
    _ request: Cake_AddCakeColorsReq,
    callOptions: CallOptions? = nil
  ) async throws -> SwiftProtobuf.Google_Protobuf_Empty {
    return try await self.performAsyncUnaryCall(
      path: Cake_CakeServiceClientMetadata.Methods.addCakeColors.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAddCakeColorsInterceptors() ?? []
    )
  }

  internal func getColors(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions? = nil
  ) async throws -> Cake_CakeColorsRes {
    return try await self.performAsyncUnaryCall(
      path: Cake_CakeServiceClientMetadata.Methods.getColors.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetColorsInterceptors() ?? []
    )
  }

  internal func add3DModel(
    _ request: Cake_Add3DModelReq,
    callOptions: CallOptions? = nil
  ) async throws -> Cake_Add3DModelRes {
    return try await self.performAsyncUnaryCall(
      path: Cake_CakeServiceClientMetadata.Methods.add3DModel.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeAdd3DModelInterceptors() ?? []
    )
  }

  internal func setCakeVisibility(
    _ request: Cake_SetCakeVisibilityReq,
    callOptions: CallOptions? = nil
  ) async throws -> SwiftProtobuf.Google_Protobuf_Empty {
    return try await self.performAsyncUnaryCall(
      path: Cake_CakeServiceClientMetadata.Methods.setCakeVisibility.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeSetCakeVisibilityInterceptors() ?? []
    )
  }

  internal func createCategory(
    _ request: Cake_CreateCategoryRequest,
    callOptions: CallOptions? = nil
  ) async throws -> Cake_CreateCategoryResponse {
    return try await self.performAsyncUnaryCall(
      path: Cake_CakeServiceClientMetadata.Methods.createCategory.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCreateCategoryInterceptors() ?? []
    )
  }

  internal func categories(
    _ request: SwiftProtobuf.Google_Protobuf_Empty,
    callOptions: CallOptions? = nil
  ) async throws -> Cake_CategoriesResponse {
    return try await self.performAsyncUnaryCall(
      path: Cake_CakeServiceClientMetadata.Methods.categories.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeCategoriesInterceptors() ?? []
    )
  }

  internal func getCategoriesByGenderName(
    _ request: Cake_GetCategoriesByGenderNameReq,
    callOptions: CallOptions? = nil
  ) async throws -> Cake_GetCategoriesByGenderNameRes {
    return try await self.performAsyncUnaryCall(
      path: Cake_CakeServiceClientMetadata.Methods.getCategoriesByGenderName.path,
      request: request,
      callOptions: callOptions ?? self.defaultCallOptions,
      interceptors: self.interceptors?.makeGetCategoriesByGenderNameInterceptors() ?? []
    )
  }
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal struct Cake_CakeServiceAsyncClient: Cake_CakeServiceAsyncClientProtocol {
  internal var channel: GRPCChannel
  internal var defaultCallOptions: CallOptions
  internal var interceptors: Cake_CakeServiceClientInterceptorFactoryProtocol?

  internal init(
    channel: GRPCChannel,
    defaultCallOptions: CallOptions = CallOptions(),
    interceptors: Cake_CakeServiceClientInterceptorFactoryProtocol? = nil
  ) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
    self.interceptors = interceptors
  }
}

internal protocol Cake_CakeServiceClientInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when invoking 'createCake'.
  func makeCreateCakeInterceptors() -> [ClientInterceptor<Cake_CreateCakeRequest, Cake_CreateCakeResponse>]

  /// - Returns: Interceptors to use when invoking 'cake'.
  func makeCakeInterceptors() -> [ClientInterceptor<Cake_CakeRequest, Cake_CakeResponse>]

  /// - Returns: Interceptors to use when invoking 'cakes'.
  func makeCakesInterceptors() -> [ClientInterceptor<SwiftProtobuf.Google_Protobuf_Empty, Cake_CakesResponse>]

  /// - Returns: Interceptors to use when invoking 'categoryPreviewCakes'.
  func makeCategoryPreviewCakesInterceptors() -> [ClientInterceptor<Cake_CategoryPreviewCakesReq, Cake_CategoryPreviewCakesRes>]

  /// - Returns: Interceptors to use when invoking 'createFilling'.
  func makeCreateFillingInterceptors() -> [ClientInterceptor<Cake_CreateFillingRequest, Cake_CreateFillingResponse>]

  /// - Returns: Interceptors to use when invoking 'fillings'.
  func makeFillingsInterceptors() -> [ClientInterceptor<SwiftProtobuf.Google_Protobuf_Empty, Cake_FillingsResponse>]

  /// - Returns: Interceptors to use when invoking 'addCakeColors'.
  func makeAddCakeColorsInterceptors() -> [ClientInterceptor<Cake_AddCakeColorsReq, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when invoking 'getColors'.
  func makeGetColorsInterceptors() -> [ClientInterceptor<SwiftProtobuf.Google_Protobuf_Empty, Cake_CakeColorsRes>]

  /// - Returns: Interceptors to use when invoking 'add3DModel'.
  func makeAdd3DModelInterceptors() -> [ClientInterceptor<Cake_Add3DModelReq, Cake_Add3DModelRes>]

  /// - Returns: Interceptors to use when invoking 'setCakeVisibility'.
  func makeSetCakeVisibilityInterceptors() -> [ClientInterceptor<Cake_SetCakeVisibilityReq, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when invoking 'createCategory'.
  func makeCreateCategoryInterceptors() -> [ClientInterceptor<Cake_CreateCategoryRequest, Cake_CreateCategoryResponse>]

  /// - Returns: Interceptors to use when invoking 'categories'.
  func makeCategoriesInterceptors() -> [ClientInterceptor<SwiftProtobuf.Google_Protobuf_Empty, Cake_CategoriesResponse>]

  /// - Returns: Interceptors to use when invoking 'getCategoriesByGenderName'.
  func makeGetCategoriesByGenderNameInterceptors() -> [ClientInterceptor<Cake_GetCategoriesByGenderNameReq, Cake_GetCategoriesByGenderNameRes>]
}

internal enum Cake_CakeServiceClientMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "CakeService",
    fullName: "cake.CakeService",
    methods: [
      Cake_CakeServiceClientMetadata.Methods.createCake,
      Cake_CakeServiceClientMetadata.Methods.cake,
      Cake_CakeServiceClientMetadata.Methods.cakes,
      Cake_CakeServiceClientMetadata.Methods.categoryPreviewCakes,
      Cake_CakeServiceClientMetadata.Methods.createFilling,
      Cake_CakeServiceClientMetadata.Methods.fillings,
      Cake_CakeServiceClientMetadata.Methods.addCakeColors,
      Cake_CakeServiceClientMetadata.Methods.getColors,
      Cake_CakeServiceClientMetadata.Methods.add3DModel,
      Cake_CakeServiceClientMetadata.Methods.setCakeVisibility,
      Cake_CakeServiceClientMetadata.Methods.createCategory,
      Cake_CakeServiceClientMetadata.Methods.categories,
      Cake_CakeServiceClientMetadata.Methods.getCategoriesByGenderName,
    ]
  )

  internal enum Methods {
    internal static let createCake = GRPCMethodDescriptor(
      name: "CreateCake",
      path: "/cake.CakeService/CreateCake",
      type: GRPCCallType.unary
    )

    internal static let cake = GRPCMethodDescriptor(
      name: "Cake",
      path: "/cake.CakeService/Cake",
      type: GRPCCallType.unary
    )

    internal static let cakes = GRPCMethodDescriptor(
      name: "Cakes",
      path: "/cake.CakeService/Cakes",
      type: GRPCCallType.unary
    )

    internal static let categoryPreviewCakes = GRPCMethodDescriptor(
      name: "CategoryPreviewCakes",
      path: "/cake.CakeService/CategoryPreviewCakes",
      type: GRPCCallType.unary
    )

    internal static let createFilling = GRPCMethodDescriptor(
      name: "CreateFilling",
      path: "/cake.CakeService/CreateFilling",
      type: GRPCCallType.unary
    )

    internal static let fillings = GRPCMethodDescriptor(
      name: "Fillings",
      path: "/cake.CakeService/Fillings",
      type: GRPCCallType.unary
    )

    internal static let addCakeColors = GRPCMethodDescriptor(
      name: "AddCakeColors",
      path: "/cake.CakeService/AddCakeColors",
      type: GRPCCallType.unary
    )

    internal static let getColors = GRPCMethodDescriptor(
      name: "GetColors",
      path: "/cake.CakeService/GetColors",
      type: GRPCCallType.unary
    )

    internal static let add3DModel = GRPCMethodDescriptor(
      name: "Add3DModel",
      path: "/cake.CakeService/Add3DModel",
      type: GRPCCallType.unary
    )

    internal static let setCakeVisibility = GRPCMethodDescriptor(
      name: "SetCakeVisibility",
      path: "/cake.CakeService/SetCakeVisibility",
      type: GRPCCallType.unary
    )

    internal static let createCategory = GRPCMethodDescriptor(
      name: "CreateCategory",
      path: "/cake.CakeService/CreateCategory",
      type: GRPCCallType.unary
    )

    internal static let categories = GRPCMethodDescriptor(
      name: "Categories",
      path: "/cake.CakeService/Categories",
      type: GRPCCallType.unary
    )

    internal static let getCategoriesByGenderName = GRPCMethodDescriptor(
      name: "GetCategoriesByGenderName",
      path: "/cake.CakeService/GetCategoriesByGenderName",
      type: GRPCCallType.unary
    )
  }
}

/// ############### CakeService ############### 
///
/// To build a server, implement a class that conforms to this protocol.
internal protocol Cake_CakeServiceProvider: CallHandlerProvider {
  var interceptors: Cake_CakeServiceServerInterceptorFactoryProtocol? { get }

  func createCake(request: Cake_CreateCakeRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Cake_CreateCakeResponse>

  func cake(request: Cake_CakeRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Cake_CakeResponse>

  func cakes(request: SwiftProtobuf.Google_Protobuf_Empty, context: StatusOnlyCallContext) -> EventLoopFuture<Cake_CakesResponse>

  func categoryPreviewCakes(request: Cake_CategoryPreviewCakesReq, context: StatusOnlyCallContext) -> EventLoopFuture<Cake_CategoryPreviewCakesRes>

  func createFilling(request: Cake_CreateFillingRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Cake_CreateFillingResponse>

  func fillings(request: SwiftProtobuf.Google_Protobuf_Empty, context: StatusOnlyCallContext) -> EventLoopFuture<Cake_FillingsResponse>

  func addCakeColors(request: Cake_AddCakeColorsReq, context: StatusOnlyCallContext) -> EventLoopFuture<SwiftProtobuf.Google_Protobuf_Empty>

  func getColors(request: SwiftProtobuf.Google_Protobuf_Empty, context: StatusOnlyCallContext) -> EventLoopFuture<Cake_CakeColorsRes>

  func add3DModel(request: Cake_Add3DModelReq, context: StatusOnlyCallContext) -> EventLoopFuture<Cake_Add3DModelRes>

  func setCakeVisibility(request: Cake_SetCakeVisibilityReq, context: StatusOnlyCallContext) -> EventLoopFuture<SwiftProtobuf.Google_Protobuf_Empty>

  func createCategory(request: Cake_CreateCategoryRequest, context: StatusOnlyCallContext) -> EventLoopFuture<Cake_CreateCategoryResponse>

  func categories(request: SwiftProtobuf.Google_Protobuf_Empty, context: StatusOnlyCallContext) -> EventLoopFuture<Cake_CategoriesResponse>

  func getCategoriesByGenderName(request: Cake_GetCategoriesByGenderNameReq, context: StatusOnlyCallContext) -> EventLoopFuture<Cake_GetCategoriesByGenderNameRes>
}

extension Cake_CakeServiceProvider {
  internal var serviceName: Substring {
    return Cake_CakeServiceServerMetadata.serviceDescriptor.fullName[...]
  }

  /// Determines, calls and returns the appropriate request handler, depending on the request's method.
  /// Returns nil for methods not handled by this service.
  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "CreateCake":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cake_CreateCakeRequest>(),
        responseSerializer: ProtobufSerializer<Cake_CreateCakeResponse>(),
        interceptors: self.interceptors?.makeCreateCakeInterceptors() ?? [],
        userFunction: self.createCake(request:context:)
      )

    case "Cake":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cake_CakeRequest>(),
        responseSerializer: ProtobufSerializer<Cake_CakeResponse>(),
        interceptors: self.interceptors?.makeCakeInterceptors() ?? [],
        userFunction: self.cake(request:context:)
      )

    case "Cakes":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        responseSerializer: ProtobufSerializer<Cake_CakesResponse>(),
        interceptors: self.interceptors?.makeCakesInterceptors() ?? [],
        userFunction: self.cakes(request:context:)
      )

    case "CategoryPreviewCakes":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cake_CategoryPreviewCakesReq>(),
        responseSerializer: ProtobufSerializer<Cake_CategoryPreviewCakesRes>(),
        interceptors: self.interceptors?.makeCategoryPreviewCakesInterceptors() ?? [],
        userFunction: self.categoryPreviewCakes(request:context:)
      )

    case "CreateFilling":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cake_CreateFillingRequest>(),
        responseSerializer: ProtobufSerializer<Cake_CreateFillingResponse>(),
        interceptors: self.interceptors?.makeCreateFillingInterceptors() ?? [],
        userFunction: self.createFilling(request:context:)
      )

    case "Fillings":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        responseSerializer: ProtobufSerializer<Cake_FillingsResponse>(),
        interceptors: self.interceptors?.makeFillingsInterceptors() ?? [],
        userFunction: self.fillings(request:context:)
      )

    case "AddCakeColors":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cake_AddCakeColorsReq>(),
        responseSerializer: ProtobufSerializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        interceptors: self.interceptors?.makeAddCakeColorsInterceptors() ?? [],
        userFunction: self.addCakeColors(request:context:)
      )

    case "GetColors":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        responseSerializer: ProtobufSerializer<Cake_CakeColorsRes>(),
        interceptors: self.interceptors?.makeGetColorsInterceptors() ?? [],
        userFunction: self.getColors(request:context:)
      )

    case "Add3DModel":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cake_Add3DModelReq>(),
        responseSerializer: ProtobufSerializer<Cake_Add3DModelRes>(),
        interceptors: self.interceptors?.makeAdd3DModelInterceptors() ?? [],
        userFunction: self.add3DModel(request:context:)
      )

    case "SetCakeVisibility":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cake_SetCakeVisibilityReq>(),
        responseSerializer: ProtobufSerializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        interceptors: self.interceptors?.makeSetCakeVisibilityInterceptors() ?? [],
        userFunction: self.setCakeVisibility(request:context:)
      )

    case "CreateCategory":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cake_CreateCategoryRequest>(),
        responseSerializer: ProtobufSerializer<Cake_CreateCategoryResponse>(),
        interceptors: self.interceptors?.makeCreateCategoryInterceptors() ?? [],
        userFunction: self.createCategory(request:context:)
      )

    case "Categories":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        responseSerializer: ProtobufSerializer<Cake_CategoriesResponse>(),
        interceptors: self.interceptors?.makeCategoriesInterceptors() ?? [],
        userFunction: self.categories(request:context:)
      )

    case "GetCategoriesByGenderName":
      return UnaryServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cake_GetCategoriesByGenderNameReq>(),
        responseSerializer: ProtobufSerializer<Cake_GetCategoriesByGenderNameRes>(),
        interceptors: self.interceptors?.makeGetCategoriesByGenderNameInterceptors() ?? [],
        userFunction: self.getCategoriesByGenderName(request:context:)
      )

    default:
      return nil
    }
  }
}

/// ############### CakeService ############### 
///
/// To implement a server, implement an object which conforms to this protocol.
@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
internal protocol Cake_CakeServiceAsyncProvider: CallHandlerProvider, Sendable {
  static var serviceDescriptor: GRPCServiceDescriptor { get }
  var interceptors: Cake_CakeServiceServerInterceptorFactoryProtocol? { get }

  func createCake(
    request: Cake_CreateCakeRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Cake_CreateCakeResponse

  func cake(
    request: Cake_CakeRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Cake_CakeResponse

  func cakes(
    request: SwiftProtobuf.Google_Protobuf_Empty,
    context: GRPCAsyncServerCallContext
  ) async throws -> Cake_CakesResponse

  func categoryPreviewCakes(
    request: Cake_CategoryPreviewCakesReq,
    context: GRPCAsyncServerCallContext
  ) async throws -> Cake_CategoryPreviewCakesRes

  func createFilling(
    request: Cake_CreateFillingRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Cake_CreateFillingResponse

  func fillings(
    request: SwiftProtobuf.Google_Protobuf_Empty,
    context: GRPCAsyncServerCallContext
  ) async throws -> Cake_FillingsResponse

  func addCakeColors(
    request: Cake_AddCakeColorsReq,
    context: GRPCAsyncServerCallContext
  ) async throws -> SwiftProtobuf.Google_Protobuf_Empty

  func getColors(
    request: SwiftProtobuf.Google_Protobuf_Empty,
    context: GRPCAsyncServerCallContext
  ) async throws -> Cake_CakeColorsRes

  func add3DModel(
    request: Cake_Add3DModelReq,
    context: GRPCAsyncServerCallContext
  ) async throws -> Cake_Add3DModelRes

  func setCakeVisibility(
    request: Cake_SetCakeVisibilityReq,
    context: GRPCAsyncServerCallContext
  ) async throws -> SwiftProtobuf.Google_Protobuf_Empty

  func createCategory(
    request: Cake_CreateCategoryRequest,
    context: GRPCAsyncServerCallContext
  ) async throws -> Cake_CreateCategoryResponse

  func categories(
    request: SwiftProtobuf.Google_Protobuf_Empty,
    context: GRPCAsyncServerCallContext
  ) async throws -> Cake_CategoriesResponse

  func getCategoriesByGenderName(
    request: Cake_GetCategoriesByGenderNameReq,
    context: GRPCAsyncServerCallContext
  ) async throws -> Cake_GetCategoriesByGenderNameRes
}

@available(macOS 10.15, iOS 13, tvOS 13, watchOS 6, *)
extension Cake_CakeServiceAsyncProvider {
  internal static var serviceDescriptor: GRPCServiceDescriptor {
    return Cake_CakeServiceServerMetadata.serviceDescriptor
  }

  internal var serviceName: Substring {
    return Cake_CakeServiceServerMetadata.serviceDescriptor.fullName[...]
  }

  internal var interceptors: Cake_CakeServiceServerInterceptorFactoryProtocol? {
    return nil
  }

  internal func handle(
    method name: Substring,
    context: CallHandlerContext
  ) -> GRPCServerHandlerProtocol? {
    switch name {
    case "CreateCake":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cake_CreateCakeRequest>(),
        responseSerializer: ProtobufSerializer<Cake_CreateCakeResponse>(),
        interceptors: self.interceptors?.makeCreateCakeInterceptors() ?? [],
        wrapping: { try await self.createCake(request: $0, context: $1) }
      )

    case "Cake":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cake_CakeRequest>(),
        responseSerializer: ProtobufSerializer<Cake_CakeResponse>(),
        interceptors: self.interceptors?.makeCakeInterceptors() ?? [],
        wrapping: { try await self.cake(request: $0, context: $1) }
      )

    case "Cakes":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        responseSerializer: ProtobufSerializer<Cake_CakesResponse>(),
        interceptors: self.interceptors?.makeCakesInterceptors() ?? [],
        wrapping: { try await self.cakes(request: $0, context: $1) }
      )

    case "CategoryPreviewCakes":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cake_CategoryPreviewCakesReq>(),
        responseSerializer: ProtobufSerializer<Cake_CategoryPreviewCakesRes>(),
        interceptors: self.interceptors?.makeCategoryPreviewCakesInterceptors() ?? [],
        wrapping: { try await self.categoryPreviewCakes(request: $0, context: $1) }
      )

    case "CreateFilling":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cake_CreateFillingRequest>(),
        responseSerializer: ProtobufSerializer<Cake_CreateFillingResponse>(),
        interceptors: self.interceptors?.makeCreateFillingInterceptors() ?? [],
        wrapping: { try await self.createFilling(request: $0, context: $1) }
      )

    case "Fillings":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        responseSerializer: ProtobufSerializer<Cake_FillingsResponse>(),
        interceptors: self.interceptors?.makeFillingsInterceptors() ?? [],
        wrapping: { try await self.fillings(request: $0, context: $1) }
      )

    case "AddCakeColors":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cake_AddCakeColorsReq>(),
        responseSerializer: ProtobufSerializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        interceptors: self.interceptors?.makeAddCakeColorsInterceptors() ?? [],
        wrapping: { try await self.addCakeColors(request: $0, context: $1) }
      )

    case "GetColors":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        responseSerializer: ProtobufSerializer<Cake_CakeColorsRes>(),
        interceptors: self.interceptors?.makeGetColorsInterceptors() ?? [],
        wrapping: { try await self.getColors(request: $0, context: $1) }
      )

    case "Add3DModel":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cake_Add3DModelReq>(),
        responseSerializer: ProtobufSerializer<Cake_Add3DModelRes>(),
        interceptors: self.interceptors?.makeAdd3DModelInterceptors() ?? [],
        wrapping: { try await self.add3DModel(request: $0, context: $1) }
      )

    case "SetCakeVisibility":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cake_SetCakeVisibilityReq>(),
        responseSerializer: ProtobufSerializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        interceptors: self.interceptors?.makeSetCakeVisibilityInterceptors() ?? [],
        wrapping: { try await self.setCakeVisibility(request: $0, context: $1) }
      )

    case "CreateCategory":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cake_CreateCategoryRequest>(),
        responseSerializer: ProtobufSerializer<Cake_CreateCategoryResponse>(),
        interceptors: self.interceptors?.makeCreateCategoryInterceptors() ?? [],
        wrapping: { try await self.createCategory(request: $0, context: $1) }
      )

    case "Categories":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<SwiftProtobuf.Google_Protobuf_Empty>(),
        responseSerializer: ProtobufSerializer<Cake_CategoriesResponse>(),
        interceptors: self.interceptors?.makeCategoriesInterceptors() ?? [],
        wrapping: { try await self.categories(request: $0, context: $1) }
      )

    case "GetCategoriesByGenderName":
      return GRPCAsyncServerHandler(
        context: context,
        requestDeserializer: ProtobufDeserializer<Cake_GetCategoriesByGenderNameReq>(),
        responseSerializer: ProtobufSerializer<Cake_GetCategoriesByGenderNameRes>(),
        interceptors: self.interceptors?.makeGetCategoriesByGenderNameInterceptors() ?? [],
        wrapping: { try await self.getCategoriesByGenderName(request: $0, context: $1) }
      )

    default:
      return nil
    }
  }
}

internal protocol Cake_CakeServiceServerInterceptorFactoryProtocol: Sendable {

  /// - Returns: Interceptors to use when handling 'createCake'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCreateCakeInterceptors() -> [ServerInterceptor<Cake_CreateCakeRequest, Cake_CreateCakeResponse>]

  /// - Returns: Interceptors to use when handling 'cake'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCakeInterceptors() -> [ServerInterceptor<Cake_CakeRequest, Cake_CakeResponse>]

  /// - Returns: Interceptors to use when handling 'cakes'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCakesInterceptors() -> [ServerInterceptor<SwiftProtobuf.Google_Protobuf_Empty, Cake_CakesResponse>]

  /// - Returns: Interceptors to use when handling 'categoryPreviewCakes'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCategoryPreviewCakesInterceptors() -> [ServerInterceptor<Cake_CategoryPreviewCakesReq, Cake_CategoryPreviewCakesRes>]

  /// - Returns: Interceptors to use when handling 'createFilling'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCreateFillingInterceptors() -> [ServerInterceptor<Cake_CreateFillingRequest, Cake_CreateFillingResponse>]

  /// - Returns: Interceptors to use when handling 'fillings'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeFillingsInterceptors() -> [ServerInterceptor<SwiftProtobuf.Google_Protobuf_Empty, Cake_FillingsResponse>]

  /// - Returns: Interceptors to use when handling 'addCakeColors'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeAddCakeColorsInterceptors() -> [ServerInterceptor<Cake_AddCakeColorsReq, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when handling 'getColors'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetColorsInterceptors() -> [ServerInterceptor<SwiftProtobuf.Google_Protobuf_Empty, Cake_CakeColorsRes>]

  /// - Returns: Interceptors to use when handling 'add3DModel'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeAdd3DModelInterceptors() -> [ServerInterceptor<Cake_Add3DModelReq, Cake_Add3DModelRes>]

  /// - Returns: Interceptors to use when handling 'setCakeVisibility'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeSetCakeVisibilityInterceptors() -> [ServerInterceptor<Cake_SetCakeVisibilityReq, SwiftProtobuf.Google_Protobuf_Empty>]

  /// - Returns: Interceptors to use when handling 'createCategory'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCreateCategoryInterceptors() -> [ServerInterceptor<Cake_CreateCategoryRequest, Cake_CreateCategoryResponse>]

  /// - Returns: Interceptors to use when handling 'categories'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeCategoriesInterceptors() -> [ServerInterceptor<SwiftProtobuf.Google_Protobuf_Empty, Cake_CategoriesResponse>]

  /// - Returns: Interceptors to use when handling 'getCategoriesByGenderName'.
  ///   Defaults to calling `self.makeInterceptors()`.
  func makeGetCategoriesByGenderNameInterceptors() -> [ServerInterceptor<Cake_GetCategoriesByGenderNameReq, Cake_GetCategoriesByGenderNameRes>]
}

internal enum Cake_CakeServiceServerMetadata {
  internal static let serviceDescriptor = GRPCServiceDescriptor(
    name: "CakeService",
    fullName: "cake.CakeService",
    methods: [
      Cake_CakeServiceServerMetadata.Methods.createCake,
      Cake_CakeServiceServerMetadata.Methods.cake,
      Cake_CakeServiceServerMetadata.Methods.cakes,
      Cake_CakeServiceServerMetadata.Methods.categoryPreviewCakes,
      Cake_CakeServiceServerMetadata.Methods.createFilling,
      Cake_CakeServiceServerMetadata.Methods.fillings,
      Cake_CakeServiceServerMetadata.Methods.addCakeColors,
      Cake_CakeServiceServerMetadata.Methods.getColors,
      Cake_CakeServiceServerMetadata.Methods.add3DModel,
      Cake_CakeServiceServerMetadata.Methods.setCakeVisibility,
      Cake_CakeServiceServerMetadata.Methods.createCategory,
      Cake_CakeServiceServerMetadata.Methods.categories,
      Cake_CakeServiceServerMetadata.Methods.getCategoriesByGenderName,
    ]
  )

  internal enum Methods {
    internal static let createCake = GRPCMethodDescriptor(
      name: "CreateCake",
      path: "/cake.CakeService/CreateCake",
      type: GRPCCallType.unary
    )

    internal static let cake = GRPCMethodDescriptor(
      name: "Cake",
      path: "/cake.CakeService/Cake",
      type: GRPCCallType.unary
    )

    internal static let cakes = GRPCMethodDescriptor(
      name: "Cakes",
      path: "/cake.CakeService/Cakes",
      type: GRPCCallType.unary
    )

    internal static let categoryPreviewCakes = GRPCMethodDescriptor(
      name: "CategoryPreviewCakes",
      path: "/cake.CakeService/CategoryPreviewCakes",
      type: GRPCCallType.unary
    )

    internal static let createFilling = GRPCMethodDescriptor(
      name: "CreateFilling",
      path: "/cake.CakeService/CreateFilling",
      type: GRPCCallType.unary
    )

    internal static let fillings = GRPCMethodDescriptor(
      name: "Fillings",
      path: "/cake.CakeService/Fillings",
      type: GRPCCallType.unary
    )

    internal static let addCakeColors = GRPCMethodDescriptor(
      name: "AddCakeColors",
      path: "/cake.CakeService/AddCakeColors",
      type: GRPCCallType.unary
    )

    internal static let getColors = GRPCMethodDescriptor(
      name: "GetColors",
      path: "/cake.CakeService/GetColors",
      type: GRPCCallType.unary
    )

    internal static let add3DModel = GRPCMethodDescriptor(
      name: "Add3DModel",
      path: "/cake.CakeService/Add3DModel",
      type: GRPCCallType.unary
    )

    internal static let setCakeVisibility = GRPCMethodDescriptor(
      name: "SetCakeVisibility",
      path: "/cake.CakeService/SetCakeVisibility",
      type: GRPCCallType.unary
    )

    internal static let createCategory = GRPCMethodDescriptor(
      name: "CreateCategory",
      path: "/cake.CakeService/CreateCategory",
      type: GRPCCallType.unary
    )

    internal static let categories = GRPCMethodDescriptor(
      name: "Categories",
      path: "/cake.CakeService/Categories",
      type: GRPCCallType.unary
    )

    internal static let getCategoriesByGenderName = GRPCMethodDescriptor(
      name: "GetCategoriesByGenderName",
      path: "/cake.CakeService/GetCategoriesByGenderName",
      type: GRPCCallType.unary
    )
  }
}
